// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"SMART_OFFICE_APP/pkg/db/model"
)

func newAPPLOGINSESSION(db *gorm.DB, opts ...gen.DOOption) aPPLOGINSESSION {
	_aPPLOGINSESSION := aPPLOGINSESSION{}

	_aPPLOGINSESSION.aPPLOGINSESSIONDo.UseDB(db, opts...)
	_aPPLOGINSESSION.aPPLOGINSESSIONDo.UseModel(&model.APPLOGINSESSION{})

	tableName := _aPPLOGINSESSION.aPPLOGINSESSIONDo.TableName()
	_aPPLOGINSESSION.ALL = field.NewAsterisk(tableName)
	_aPPLOGINSESSION.SEQ = field.NewInt64(tableName, "SEQ")
	_aPPLOGINSESSION.TOKEN = field.NewString(tableName, "TOKEN")
	_aPPLOGINSESSION.DEVICEID = field.NewString(tableName, "DEVICE_ID")
	_aPPLOGINSESSION.PLATFORM = field.NewString(tableName, "PLATFORM")
	_aPPLOGINSESSION.BROWSER = field.NewString(tableName, "BROWSER")
	_aPPLOGINSESSION.USERAGENT = field.NewString(tableName, "USER_AGENT")
	_aPPLOGINSESSION.OS = field.NewString(tableName, "OS")
	_aPPLOGINSESSION.IMEI = field.NewString(tableName, "IMEI")
	_aPPLOGINSESSION.LOGINAT = field.NewString(tableName, "LOGIN_AT")
	_aPPLOGINSESSION.LOGINEXPIRE = field.NewString(tableName, "LOGIN_EXPIRE")
	_aPPLOGINSESSION.LOGINSTATUS = field.NewBool(tableName, "LOGIN_STATUS")
	_aPPLOGINSESSION.USERID = field.NewString(tableName, "USER_ID")
	_aPPLOGINSESSION.FCMTOKEN = field.NewString(tableName, "FCM_TOKEN")

	_aPPLOGINSESSION.fillFieldMap()

	return _aPPLOGINSESSION
}

type aPPLOGINSESSION struct {
	aPPLOGINSESSIONDo

	ALL         field.Asterisk
	SEQ         field.Int64
	TOKEN       field.String
	DEVICEID    field.String
	PLATFORM    field.String
	BROWSER     field.String
	USERAGENT   field.String
	OS          field.String
	IMEI        field.String
	LOGINAT     field.String
	LOGINEXPIRE field.String
	LOGINSTATUS field.Bool
	USERID      field.String
	FCMTOKEN    field.String

	fieldMap map[string]field.Expr
}

func (a aPPLOGINSESSION) Table(newTableName string) *aPPLOGINSESSION {
	a.aPPLOGINSESSIONDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aPPLOGINSESSION) As(alias string) *aPPLOGINSESSION {
	a.aPPLOGINSESSIONDo.DO = *(a.aPPLOGINSESSIONDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aPPLOGINSESSION) updateTableName(table string) *aPPLOGINSESSION {
	a.ALL = field.NewAsterisk(table)
	a.SEQ = field.NewInt64(table, "SEQ")
	a.TOKEN = field.NewString(table, "TOKEN")
	a.DEVICEID = field.NewString(table, "DEVICE_ID")
	a.PLATFORM = field.NewString(table, "PLATFORM")
	a.BROWSER = field.NewString(table, "BROWSER")
	a.USERAGENT = field.NewString(table, "USER_AGENT")
	a.OS = field.NewString(table, "OS")
	a.IMEI = field.NewString(table, "IMEI")
	a.LOGINAT = field.NewString(table, "LOGIN_AT")
	a.LOGINEXPIRE = field.NewString(table, "LOGIN_EXPIRE")
	a.LOGINSTATUS = field.NewBool(table, "LOGIN_STATUS")
	a.USERID = field.NewString(table, "USER_ID")
	a.FCMTOKEN = field.NewString(table, "FCM_TOKEN")

	a.fillFieldMap()

	return a
}

func (a *aPPLOGINSESSION) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aPPLOGINSESSION) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 13)
	a.fieldMap["SEQ"] = a.SEQ
	a.fieldMap["TOKEN"] = a.TOKEN
	a.fieldMap["DEVICE_ID"] = a.DEVICEID
	a.fieldMap["PLATFORM"] = a.PLATFORM
	a.fieldMap["BROWSER"] = a.BROWSER
	a.fieldMap["USER_AGENT"] = a.USERAGENT
	a.fieldMap["OS"] = a.OS
	a.fieldMap["IMEI"] = a.IMEI
	a.fieldMap["LOGIN_AT"] = a.LOGINAT
	a.fieldMap["LOGIN_EXPIRE"] = a.LOGINEXPIRE
	a.fieldMap["LOGIN_STATUS"] = a.LOGINSTATUS
	a.fieldMap["USER_ID"] = a.USERID
	a.fieldMap["FCM_TOKEN"] = a.FCMTOKEN
}

func (a aPPLOGINSESSION) clone(db *gorm.DB) aPPLOGINSESSION {
	a.aPPLOGINSESSIONDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aPPLOGINSESSION) replaceDB(db *gorm.DB) aPPLOGINSESSION {
	a.aPPLOGINSESSIONDo.ReplaceDB(db)
	return a
}

type aPPLOGINSESSIONDo struct{ gen.DO }

func (a aPPLOGINSESSIONDo) Debug() *aPPLOGINSESSIONDo {
	return a.withDO(a.DO.Debug())
}

func (a aPPLOGINSESSIONDo) WithContext(ctx context.Context) *aPPLOGINSESSIONDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aPPLOGINSESSIONDo) ReadDB() *aPPLOGINSESSIONDo {
	return a.Clauses(dbresolver.Read)
}

func (a aPPLOGINSESSIONDo) WriteDB() *aPPLOGINSESSIONDo {
	return a.Clauses(dbresolver.Write)
}

func (a aPPLOGINSESSIONDo) Session(config *gorm.Session) *aPPLOGINSESSIONDo {
	return a.withDO(a.DO.Session(config))
}

func (a aPPLOGINSESSIONDo) Clauses(conds ...clause.Expression) *aPPLOGINSESSIONDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aPPLOGINSESSIONDo) Returning(value interface{}, columns ...string) *aPPLOGINSESSIONDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aPPLOGINSESSIONDo) Not(conds ...gen.Condition) *aPPLOGINSESSIONDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aPPLOGINSESSIONDo) Or(conds ...gen.Condition) *aPPLOGINSESSIONDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aPPLOGINSESSIONDo) Select(conds ...field.Expr) *aPPLOGINSESSIONDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aPPLOGINSESSIONDo) Where(conds ...gen.Condition) *aPPLOGINSESSIONDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aPPLOGINSESSIONDo) Order(conds ...field.Expr) *aPPLOGINSESSIONDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aPPLOGINSESSIONDo) Distinct(cols ...field.Expr) *aPPLOGINSESSIONDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aPPLOGINSESSIONDo) Omit(cols ...field.Expr) *aPPLOGINSESSIONDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aPPLOGINSESSIONDo) Join(table schema.Tabler, on ...field.Expr) *aPPLOGINSESSIONDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aPPLOGINSESSIONDo) LeftJoin(table schema.Tabler, on ...field.Expr) *aPPLOGINSESSIONDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aPPLOGINSESSIONDo) RightJoin(table schema.Tabler, on ...field.Expr) *aPPLOGINSESSIONDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aPPLOGINSESSIONDo) Group(cols ...field.Expr) *aPPLOGINSESSIONDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aPPLOGINSESSIONDo) Having(conds ...gen.Condition) *aPPLOGINSESSIONDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aPPLOGINSESSIONDo) Limit(limit int) *aPPLOGINSESSIONDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aPPLOGINSESSIONDo) Offset(offset int) *aPPLOGINSESSIONDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aPPLOGINSESSIONDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *aPPLOGINSESSIONDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aPPLOGINSESSIONDo) Unscoped() *aPPLOGINSESSIONDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aPPLOGINSESSIONDo) Create(values ...*model.APPLOGINSESSION) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aPPLOGINSESSIONDo) CreateInBatches(values []*model.APPLOGINSESSION, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aPPLOGINSESSIONDo) Save(values ...*model.APPLOGINSESSION) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aPPLOGINSESSIONDo) First() (*model.APPLOGINSESSION, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPLOGINSESSION), nil
	}
}

func (a aPPLOGINSESSIONDo) Take() (*model.APPLOGINSESSION, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPLOGINSESSION), nil
	}
}

func (a aPPLOGINSESSIONDo) Last() (*model.APPLOGINSESSION, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPLOGINSESSION), nil
	}
}

func (a aPPLOGINSESSIONDo) Find() ([]*model.APPLOGINSESSION, error) {
	result, err := a.DO.Find()
	return result.([]*model.APPLOGINSESSION), err
}

func (a aPPLOGINSESSIONDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APPLOGINSESSION, err error) {
	buf := make([]*model.APPLOGINSESSION, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aPPLOGINSESSIONDo) FindInBatches(result *[]*model.APPLOGINSESSION, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aPPLOGINSESSIONDo) Attrs(attrs ...field.AssignExpr) *aPPLOGINSESSIONDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aPPLOGINSESSIONDo) Assign(attrs ...field.AssignExpr) *aPPLOGINSESSIONDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aPPLOGINSESSIONDo) Joins(fields ...field.RelationField) *aPPLOGINSESSIONDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aPPLOGINSESSIONDo) Preload(fields ...field.RelationField) *aPPLOGINSESSIONDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aPPLOGINSESSIONDo) FirstOrInit() (*model.APPLOGINSESSION, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPLOGINSESSION), nil
	}
}

func (a aPPLOGINSESSIONDo) FirstOrCreate() (*model.APPLOGINSESSION, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPLOGINSESSION), nil
	}
}

func (a aPPLOGINSESSIONDo) FindByPage(offset int, limit int) (result []*model.APPLOGINSESSION, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aPPLOGINSESSIONDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aPPLOGINSESSIONDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aPPLOGINSESSIONDo) Delete(models ...*model.APPLOGINSESSION) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aPPLOGINSESSIONDo) withDO(do gen.Dao) *aPPLOGINSESSIONDo {
	a.DO = *do.(*gen.DO)
	return a
}
