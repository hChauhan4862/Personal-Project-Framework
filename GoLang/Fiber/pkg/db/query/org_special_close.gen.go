// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"SMART_OFFICE_APP/pkg/db/model"
)

func newORGSPECIALCLOSE(db *gorm.DB, opts ...gen.DOOption) oRGSPECIALCLOSE {
	_oRGSPECIALCLOSE := oRGSPECIALCLOSE{}

	_oRGSPECIALCLOSE.oRGSPECIALCLOSEDo.UseDB(db, opts...)
	_oRGSPECIALCLOSE.oRGSPECIALCLOSEDo.UseModel(&model.ORGSPECIALCLOSE{})

	tableName := _oRGSPECIALCLOSE.oRGSPECIALCLOSEDo.TableName()
	_oRGSPECIALCLOSE.ALL = field.NewAsterisk(tableName)
	_oRGSPECIALCLOSE.CLOSEID = field.NewInt64(tableName, "CLOSE_ID")
	_oRGSPECIALCLOSE.CLOSESTART = field.NewString(tableName, "CLOSE_START")
	_oRGSPECIALCLOSE.CLOSEEND = field.NewString(tableName, "CLOSE_END")
	_oRGSPECIALCLOSE.CLOSENAME = field.NewString(tableName, "CLOSE_NAME")
	_oRGSPECIALCLOSE.CLOSEREASON = field.NewString(tableName, "CLOSE_REASON")
	_oRGSPECIALCLOSE.OFFICEID = field.NewInt64(tableName, "OFFICE_ID")
	_oRGSPECIALCLOSE.FLOORID = field.NewInt64(tableName, "FLOOR_ID")
	_oRGSPECIALCLOSE.ROOMID = field.NewInt64(tableName, "ROOM_ID")
	_oRGSPECIALCLOSE.CREATEDAT = field.NewString(tableName, "CREATED_AT")
	_oRGSPECIALCLOSE.UPDATEDAT = field.NewString(tableName, "UPDATED_AT")

	_oRGSPECIALCLOSE.fillFieldMap()

	return _oRGSPECIALCLOSE
}

type oRGSPECIALCLOSE struct {
	oRGSPECIALCLOSEDo

	ALL         field.Asterisk
	CLOSEID     field.Int64
	CLOSESTART  field.String
	CLOSEEND    field.String
	CLOSENAME   field.String
	CLOSEREASON field.String
	OFFICEID    field.Int64
	FLOORID     field.Int64
	ROOMID      field.Int64
	CREATEDAT   field.String
	UPDATEDAT   field.String

	fieldMap map[string]field.Expr
}

func (o oRGSPECIALCLOSE) Table(newTableName string) *oRGSPECIALCLOSE {
	o.oRGSPECIALCLOSEDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o oRGSPECIALCLOSE) As(alias string) *oRGSPECIALCLOSE {
	o.oRGSPECIALCLOSEDo.DO = *(o.oRGSPECIALCLOSEDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *oRGSPECIALCLOSE) updateTableName(table string) *oRGSPECIALCLOSE {
	o.ALL = field.NewAsterisk(table)
	o.CLOSEID = field.NewInt64(table, "CLOSE_ID")
	o.CLOSESTART = field.NewString(table, "CLOSE_START")
	o.CLOSEEND = field.NewString(table, "CLOSE_END")
	o.CLOSENAME = field.NewString(table, "CLOSE_NAME")
	o.CLOSEREASON = field.NewString(table, "CLOSE_REASON")
	o.OFFICEID = field.NewInt64(table, "OFFICE_ID")
	o.FLOORID = field.NewInt64(table, "FLOOR_ID")
	o.ROOMID = field.NewInt64(table, "ROOM_ID")
	o.CREATEDAT = field.NewString(table, "CREATED_AT")
	o.UPDATEDAT = field.NewString(table, "UPDATED_AT")

	o.fillFieldMap()

	return o
}

func (o *oRGSPECIALCLOSE) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *oRGSPECIALCLOSE) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 10)
	o.fieldMap["CLOSE_ID"] = o.CLOSEID
	o.fieldMap["CLOSE_START"] = o.CLOSESTART
	o.fieldMap["CLOSE_END"] = o.CLOSEEND
	o.fieldMap["CLOSE_NAME"] = o.CLOSENAME
	o.fieldMap["CLOSE_REASON"] = o.CLOSEREASON
	o.fieldMap["OFFICE_ID"] = o.OFFICEID
	o.fieldMap["FLOOR_ID"] = o.FLOORID
	o.fieldMap["ROOM_ID"] = o.ROOMID
	o.fieldMap["CREATED_AT"] = o.CREATEDAT
	o.fieldMap["UPDATED_AT"] = o.UPDATEDAT
}

func (o oRGSPECIALCLOSE) clone(db *gorm.DB) oRGSPECIALCLOSE {
	o.oRGSPECIALCLOSEDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o oRGSPECIALCLOSE) replaceDB(db *gorm.DB) oRGSPECIALCLOSE {
	o.oRGSPECIALCLOSEDo.ReplaceDB(db)
	return o
}

type oRGSPECIALCLOSEDo struct{ gen.DO }

func (o oRGSPECIALCLOSEDo) Debug() *oRGSPECIALCLOSEDo {
	return o.withDO(o.DO.Debug())
}

func (o oRGSPECIALCLOSEDo) WithContext(ctx context.Context) *oRGSPECIALCLOSEDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o oRGSPECIALCLOSEDo) ReadDB() *oRGSPECIALCLOSEDo {
	return o.Clauses(dbresolver.Read)
}

func (o oRGSPECIALCLOSEDo) WriteDB() *oRGSPECIALCLOSEDo {
	return o.Clauses(dbresolver.Write)
}

func (o oRGSPECIALCLOSEDo) Session(config *gorm.Session) *oRGSPECIALCLOSEDo {
	return o.withDO(o.DO.Session(config))
}

func (o oRGSPECIALCLOSEDo) Clauses(conds ...clause.Expression) *oRGSPECIALCLOSEDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o oRGSPECIALCLOSEDo) Returning(value interface{}, columns ...string) *oRGSPECIALCLOSEDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o oRGSPECIALCLOSEDo) Not(conds ...gen.Condition) *oRGSPECIALCLOSEDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o oRGSPECIALCLOSEDo) Or(conds ...gen.Condition) *oRGSPECIALCLOSEDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o oRGSPECIALCLOSEDo) Select(conds ...field.Expr) *oRGSPECIALCLOSEDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o oRGSPECIALCLOSEDo) Where(conds ...gen.Condition) *oRGSPECIALCLOSEDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o oRGSPECIALCLOSEDo) Order(conds ...field.Expr) *oRGSPECIALCLOSEDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o oRGSPECIALCLOSEDo) Distinct(cols ...field.Expr) *oRGSPECIALCLOSEDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o oRGSPECIALCLOSEDo) Omit(cols ...field.Expr) *oRGSPECIALCLOSEDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o oRGSPECIALCLOSEDo) Join(table schema.Tabler, on ...field.Expr) *oRGSPECIALCLOSEDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o oRGSPECIALCLOSEDo) LeftJoin(table schema.Tabler, on ...field.Expr) *oRGSPECIALCLOSEDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o oRGSPECIALCLOSEDo) RightJoin(table schema.Tabler, on ...field.Expr) *oRGSPECIALCLOSEDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o oRGSPECIALCLOSEDo) Group(cols ...field.Expr) *oRGSPECIALCLOSEDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o oRGSPECIALCLOSEDo) Having(conds ...gen.Condition) *oRGSPECIALCLOSEDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o oRGSPECIALCLOSEDo) Limit(limit int) *oRGSPECIALCLOSEDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o oRGSPECIALCLOSEDo) Offset(offset int) *oRGSPECIALCLOSEDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o oRGSPECIALCLOSEDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *oRGSPECIALCLOSEDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o oRGSPECIALCLOSEDo) Unscoped() *oRGSPECIALCLOSEDo {
	return o.withDO(o.DO.Unscoped())
}

func (o oRGSPECIALCLOSEDo) Create(values ...*model.ORGSPECIALCLOSE) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o oRGSPECIALCLOSEDo) CreateInBatches(values []*model.ORGSPECIALCLOSE, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o oRGSPECIALCLOSEDo) Save(values ...*model.ORGSPECIALCLOSE) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o oRGSPECIALCLOSEDo) First() (*model.ORGSPECIALCLOSE, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGSPECIALCLOSE), nil
	}
}

func (o oRGSPECIALCLOSEDo) Take() (*model.ORGSPECIALCLOSE, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGSPECIALCLOSE), nil
	}
}

func (o oRGSPECIALCLOSEDo) Last() (*model.ORGSPECIALCLOSE, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGSPECIALCLOSE), nil
	}
}

func (o oRGSPECIALCLOSEDo) Find() ([]*model.ORGSPECIALCLOSE, error) {
	result, err := o.DO.Find()
	return result.([]*model.ORGSPECIALCLOSE), err
}

func (o oRGSPECIALCLOSEDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ORGSPECIALCLOSE, err error) {
	buf := make([]*model.ORGSPECIALCLOSE, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o oRGSPECIALCLOSEDo) FindInBatches(result *[]*model.ORGSPECIALCLOSE, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o oRGSPECIALCLOSEDo) Attrs(attrs ...field.AssignExpr) *oRGSPECIALCLOSEDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o oRGSPECIALCLOSEDo) Assign(attrs ...field.AssignExpr) *oRGSPECIALCLOSEDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o oRGSPECIALCLOSEDo) Joins(fields ...field.RelationField) *oRGSPECIALCLOSEDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o oRGSPECIALCLOSEDo) Preload(fields ...field.RelationField) *oRGSPECIALCLOSEDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o oRGSPECIALCLOSEDo) FirstOrInit() (*model.ORGSPECIALCLOSE, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGSPECIALCLOSE), nil
	}
}

func (o oRGSPECIALCLOSEDo) FirstOrCreate() (*model.ORGSPECIALCLOSE, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGSPECIALCLOSE), nil
	}
}

func (o oRGSPECIALCLOSEDo) FindByPage(offset int, limit int) (result []*model.ORGSPECIALCLOSE, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o oRGSPECIALCLOSEDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o oRGSPECIALCLOSEDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o oRGSPECIALCLOSEDo) Delete(models ...*model.ORGSPECIALCLOSE) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *oRGSPECIALCLOSEDo) withDO(do gen.Dao) *oRGSPECIALCLOSEDo {
	o.DO = *do.(*gen.DO)
	return o
}
