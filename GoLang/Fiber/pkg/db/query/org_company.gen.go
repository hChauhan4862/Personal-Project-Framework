// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"SMART_OFFICE_APP/pkg/db/model"
)

func newORGCOMPANY(db *gorm.DB, opts ...gen.DOOption) oRGCOMPANY {
	_oRGCOMPANY := oRGCOMPANY{}

	_oRGCOMPANY.oRGCOMPANYDo.UseDB(db, opts...)
	_oRGCOMPANY.oRGCOMPANYDo.UseModel(&model.ORGCOMPANY{})

	tableName := _oRGCOMPANY.oRGCOMPANYDo.TableName()
	_oRGCOMPANY.ALL = field.NewAsterisk(tableName)
	_oRGCOMPANY.COMPANYCODE = field.NewString(tableName, "COMPANY_CODE")
	_oRGCOMPANY.COMPANYNAME = field.NewString(tableName, "COMPANY_NAME")
	_oRGCOMPANY.COMPANYADDRESS = field.NewString(tableName, "COMPANY_ADDRESS")
	_oRGCOMPANY.COMPANYCONTACT = field.NewString(tableName, "COMPANY_CONTACT")
	_oRGCOMPANY.COMPANYEMAIL = field.NewString(tableName, "COMPANY_EMAIL")
	_oRGCOMPANY.COMPANYWEBSITE = field.NewString(tableName, "COMPANY_WEBSITE")
	_oRGCOMPANY.COMPANYLOGO = field.NewString(tableName, "COMPANY_LOGO")

	_oRGCOMPANY.fillFieldMap()

	return _oRGCOMPANY
}

type oRGCOMPANY struct {
	oRGCOMPANYDo

	ALL            field.Asterisk
	COMPANYCODE    field.String
	COMPANYNAME    field.String
	COMPANYADDRESS field.String
	COMPANYCONTACT field.String
	COMPANYEMAIL   field.String
	COMPANYWEBSITE field.String
	COMPANYLOGO    field.String

	fieldMap map[string]field.Expr
}

func (o oRGCOMPANY) Table(newTableName string) *oRGCOMPANY {
	o.oRGCOMPANYDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o oRGCOMPANY) As(alias string) *oRGCOMPANY {
	o.oRGCOMPANYDo.DO = *(o.oRGCOMPANYDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *oRGCOMPANY) updateTableName(table string) *oRGCOMPANY {
	o.ALL = field.NewAsterisk(table)
	o.COMPANYCODE = field.NewString(table, "COMPANY_CODE")
	o.COMPANYNAME = field.NewString(table, "COMPANY_NAME")
	o.COMPANYADDRESS = field.NewString(table, "COMPANY_ADDRESS")
	o.COMPANYCONTACT = field.NewString(table, "COMPANY_CONTACT")
	o.COMPANYEMAIL = field.NewString(table, "COMPANY_EMAIL")
	o.COMPANYWEBSITE = field.NewString(table, "COMPANY_WEBSITE")
	o.COMPANYLOGO = field.NewString(table, "COMPANY_LOGO")

	o.fillFieldMap()

	return o
}

func (o *oRGCOMPANY) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *oRGCOMPANY) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 7)
	o.fieldMap["COMPANY_CODE"] = o.COMPANYCODE
	o.fieldMap["COMPANY_NAME"] = o.COMPANYNAME
	o.fieldMap["COMPANY_ADDRESS"] = o.COMPANYADDRESS
	o.fieldMap["COMPANY_CONTACT"] = o.COMPANYCONTACT
	o.fieldMap["COMPANY_EMAIL"] = o.COMPANYEMAIL
	o.fieldMap["COMPANY_WEBSITE"] = o.COMPANYWEBSITE
	o.fieldMap["COMPANY_LOGO"] = o.COMPANYLOGO
}

func (o oRGCOMPANY) clone(db *gorm.DB) oRGCOMPANY {
	o.oRGCOMPANYDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o oRGCOMPANY) replaceDB(db *gorm.DB) oRGCOMPANY {
	o.oRGCOMPANYDo.ReplaceDB(db)
	return o
}

type oRGCOMPANYDo struct{ gen.DO }

func (o oRGCOMPANYDo) Debug() *oRGCOMPANYDo {
	return o.withDO(o.DO.Debug())
}

func (o oRGCOMPANYDo) WithContext(ctx context.Context) *oRGCOMPANYDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o oRGCOMPANYDo) ReadDB() *oRGCOMPANYDo {
	return o.Clauses(dbresolver.Read)
}

func (o oRGCOMPANYDo) WriteDB() *oRGCOMPANYDo {
	return o.Clauses(dbresolver.Write)
}

func (o oRGCOMPANYDo) Session(config *gorm.Session) *oRGCOMPANYDo {
	return o.withDO(o.DO.Session(config))
}

func (o oRGCOMPANYDo) Clauses(conds ...clause.Expression) *oRGCOMPANYDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o oRGCOMPANYDo) Returning(value interface{}, columns ...string) *oRGCOMPANYDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o oRGCOMPANYDo) Not(conds ...gen.Condition) *oRGCOMPANYDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o oRGCOMPANYDo) Or(conds ...gen.Condition) *oRGCOMPANYDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o oRGCOMPANYDo) Select(conds ...field.Expr) *oRGCOMPANYDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o oRGCOMPANYDo) Where(conds ...gen.Condition) *oRGCOMPANYDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o oRGCOMPANYDo) Order(conds ...field.Expr) *oRGCOMPANYDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o oRGCOMPANYDo) Distinct(cols ...field.Expr) *oRGCOMPANYDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o oRGCOMPANYDo) Omit(cols ...field.Expr) *oRGCOMPANYDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o oRGCOMPANYDo) Join(table schema.Tabler, on ...field.Expr) *oRGCOMPANYDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o oRGCOMPANYDo) LeftJoin(table schema.Tabler, on ...field.Expr) *oRGCOMPANYDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o oRGCOMPANYDo) RightJoin(table schema.Tabler, on ...field.Expr) *oRGCOMPANYDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o oRGCOMPANYDo) Group(cols ...field.Expr) *oRGCOMPANYDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o oRGCOMPANYDo) Having(conds ...gen.Condition) *oRGCOMPANYDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o oRGCOMPANYDo) Limit(limit int) *oRGCOMPANYDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o oRGCOMPANYDo) Offset(offset int) *oRGCOMPANYDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o oRGCOMPANYDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *oRGCOMPANYDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o oRGCOMPANYDo) Unscoped() *oRGCOMPANYDo {
	return o.withDO(o.DO.Unscoped())
}

func (o oRGCOMPANYDo) Create(values ...*model.ORGCOMPANY) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o oRGCOMPANYDo) CreateInBatches(values []*model.ORGCOMPANY, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o oRGCOMPANYDo) Save(values ...*model.ORGCOMPANY) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o oRGCOMPANYDo) First() (*model.ORGCOMPANY, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGCOMPANY), nil
	}
}

func (o oRGCOMPANYDo) Take() (*model.ORGCOMPANY, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGCOMPANY), nil
	}
}

func (o oRGCOMPANYDo) Last() (*model.ORGCOMPANY, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGCOMPANY), nil
	}
}

func (o oRGCOMPANYDo) Find() ([]*model.ORGCOMPANY, error) {
	result, err := o.DO.Find()
	return result.([]*model.ORGCOMPANY), err
}

func (o oRGCOMPANYDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ORGCOMPANY, err error) {
	buf := make([]*model.ORGCOMPANY, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o oRGCOMPANYDo) FindInBatches(result *[]*model.ORGCOMPANY, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o oRGCOMPANYDo) Attrs(attrs ...field.AssignExpr) *oRGCOMPANYDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o oRGCOMPANYDo) Assign(attrs ...field.AssignExpr) *oRGCOMPANYDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o oRGCOMPANYDo) Joins(fields ...field.RelationField) *oRGCOMPANYDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o oRGCOMPANYDo) Preload(fields ...field.RelationField) *oRGCOMPANYDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o oRGCOMPANYDo) FirstOrInit() (*model.ORGCOMPANY, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGCOMPANY), nil
	}
}

func (o oRGCOMPANYDo) FirstOrCreate() (*model.ORGCOMPANY, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGCOMPANY), nil
	}
}

func (o oRGCOMPANYDo) FindByPage(offset int, limit int) (result []*model.ORGCOMPANY, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o oRGCOMPANYDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o oRGCOMPANYDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o oRGCOMPANYDo) Delete(models ...*model.ORGCOMPANY) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *oRGCOMPANYDo) withDO(do gen.Dao) *oRGCOMPANYDo {
	o.DO = *do.(*gen.DO)
	return o
}
