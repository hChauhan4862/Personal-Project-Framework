// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"SMART_OFFICE_APP/pkg/db/model"
)

func newAPPCONFIG(db *gorm.DB, opts ...gen.DOOption) aPPCONFIG {
	_aPPCONFIG := aPPCONFIG{}

	_aPPCONFIG.aPPCONFIGDo.UseDB(db, opts...)
	_aPPCONFIG.aPPCONFIGDo.UseModel(&model.APPCONFIG{})

	tableName := _aPPCONFIG.aPPCONFIGDo.TableName()
	_aPPCONFIG.ALL = field.NewAsterisk(tableName)
	_aPPCONFIG.NAME = field.NewString(tableName, "NAME")
	_aPPCONFIG.VALUE = field.NewString(tableName, "VALUE")
	_aPPCONFIG.DATATYPE = field.NewString(tableName, "DATATYPE")
	_aPPCONFIG.INTMIN = field.NewInt64(tableName, "INT_MIN")
	_aPPCONFIG.INTMAX = field.NewInt64(tableName, "INT_MAX")
	_aPPCONFIG.OPTIONS = field.NewString(tableName, "OPTIONS")
	_aPPCONFIG.STRINGREGEX = field.NewString(tableName, "STRING_REGEX")

	_aPPCONFIG.fillFieldMap()

	return _aPPCONFIG
}

type aPPCONFIG struct {
	aPPCONFIGDo

	ALL         field.Asterisk
	NAME        field.String
	VALUE       field.String
	DATATYPE    field.String
	INTMIN      field.Int64
	INTMAX      field.Int64
	OPTIONS     field.String
	STRINGREGEX field.String

	fieldMap map[string]field.Expr
}

func (a aPPCONFIG) Table(newTableName string) *aPPCONFIG {
	a.aPPCONFIGDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aPPCONFIG) As(alias string) *aPPCONFIG {
	a.aPPCONFIGDo.DO = *(a.aPPCONFIGDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aPPCONFIG) updateTableName(table string) *aPPCONFIG {
	a.ALL = field.NewAsterisk(table)
	a.NAME = field.NewString(table, "NAME")
	a.VALUE = field.NewString(table, "VALUE")
	a.DATATYPE = field.NewString(table, "DATATYPE")
	a.INTMIN = field.NewInt64(table, "INT_MIN")
	a.INTMAX = field.NewInt64(table, "INT_MAX")
	a.OPTIONS = field.NewString(table, "OPTIONS")
	a.STRINGREGEX = field.NewString(table, "STRING_REGEX")

	a.fillFieldMap()

	return a
}

func (a *aPPCONFIG) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aPPCONFIG) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["NAME"] = a.NAME
	a.fieldMap["VALUE"] = a.VALUE
	a.fieldMap["DATATYPE"] = a.DATATYPE
	a.fieldMap["INT_MIN"] = a.INTMIN
	a.fieldMap["INT_MAX"] = a.INTMAX
	a.fieldMap["OPTIONS"] = a.OPTIONS
	a.fieldMap["STRING_REGEX"] = a.STRINGREGEX
}

func (a aPPCONFIG) clone(db *gorm.DB) aPPCONFIG {
	a.aPPCONFIGDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aPPCONFIG) replaceDB(db *gorm.DB) aPPCONFIG {
	a.aPPCONFIGDo.ReplaceDB(db)
	return a
}

type aPPCONFIGDo struct{ gen.DO }

func (a aPPCONFIGDo) Debug() *aPPCONFIGDo {
	return a.withDO(a.DO.Debug())
}

func (a aPPCONFIGDo) WithContext(ctx context.Context) *aPPCONFIGDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aPPCONFIGDo) ReadDB() *aPPCONFIGDo {
	return a.Clauses(dbresolver.Read)
}

func (a aPPCONFIGDo) WriteDB() *aPPCONFIGDo {
	return a.Clauses(dbresolver.Write)
}

func (a aPPCONFIGDo) Session(config *gorm.Session) *aPPCONFIGDo {
	return a.withDO(a.DO.Session(config))
}

func (a aPPCONFIGDo) Clauses(conds ...clause.Expression) *aPPCONFIGDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aPPCONFIGDo) Returning(value interface{}, columns ...string) *aPPCONFIGDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aPPCONFIGDo) Not(conds ...gen.Condition) *aPPCONFIGDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aPPCONFIGDo) Or(conds ...gen.Condition) *aPPCONFIGDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aPPCONFIGDo) Select(conds ...field.Expr) *aPPCONFIGDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aPPCONFIGDo) Where(conds ...gen.Condition) *aPPCONFIGDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aPPCONFIGDo) Order(conds ...field.Expr) *aPPCONFIGDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aPPCONFIGDo) Distinct(cols ...field.Expr) *aPPCONFIGDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aPPCONFIGDo) Omit(cols ...field.Expr) *aPPCONFIGDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aPPCONFIGDo) Join(table schema.Tabler, on ...field.Expr) *aPPCONFIGDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aPPCONFIGDo) LeftJoin(table schema.Tabler, on ...field.Expr) *aPPCONFIGDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aPPCONFIGDo) RightJoin(table schema.Tabler, on ...field.Expr) *aPPCONFIGDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aPPCONFIGDo) Group(cols ...field.Expr) *aPPCONFIGDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aPPCONFIGDo) Having(conds ...gen.Condition) *aPPCONFIGDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aPPCONFIGDo) Limit(limit int) *aPPCONFIGDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aPPCONFIGDo) Offset(offset int) *aPPCONFIGDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aPPCONFIGDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *aPPCONFIGDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aPPCONFIGDo) Unscoped() *aPPCONFIGDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aPPCONFIGDo) Create(values ...*model.APPCONFIG) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aPPCONFIGDo) CreateInBatches(values []*model.APPCONFIG, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aPPCONFIGDo) Save(values ...*model.APPCONFIG) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aPPCONFIGDo) First() (*model.APPCONFIG, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPCONFIG), nil
	}
}

func (a aPPCONFIGDo) Take() (*model.APPCONFIG, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPCONFIG), nil
	}
}

func (a aPPCONFIGDo) Last() (*model.APPCONFIG, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPCONFIG), nil
	}
}

func (a aPPCONFIGDo) Find() ([]*model.APPCONFIG, error) {
	result, err := a.DO.Find()
	return result.([]*model.APPCONFIG), err
}

func (a aPPCONFIGDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APPCONFIG, err error) {
	buf := make([]*model.APPCONFIG, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aPPCONFIGDo) FindInBatches(result *[]*model.APPCONFIG, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aPPCONFIGDo) Attrs(attrs ...field.AssignExpr) *aPPCONFIGDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aPPCONFIGDo) Assign(attrs ...field.AssignExpr) *aPPCONFIGDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aPPCONFIGDo) Joins(fields ...field.RelationField) *aPPCONFIGDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aPPCONFIGDo) Preload(fields ...field.RelationField) *aPPCONFIGDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aPPCONFIGDo) FirstOrInit() (*model.APPCONFIG, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPCONFIG), nil
	}
}

func (a aPPCONFIGDo) FirstOrCreate() (*model.APPCONFIG, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPCONFIG), nil
	}
}

func (a aPPCONFIGDo) FindByPage(offset int, limit int) (result []*model.APPCONFIG, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aPPCONFIGDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aPPCONFIGDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aPPCONFIGDo) Delete(models ...*model.APPCONFIG) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aPPCONFIGDo) withDO(do gen.Dao) *aPPCONFIGDo {
	a.DO = *do.(*gen.DO)
	return a
}
