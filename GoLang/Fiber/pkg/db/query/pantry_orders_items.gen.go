// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"SMART_OFFICE_APP/pkg/db/model"
)

func newPANTRYORDERSITEM(db *gorm.DB, opts ...gen.DOOption) pANTRYORDERSITEM {
	_pANTRYORDERSITEM := pANTRYORDERSITEM{}

	_pANTRYORDERSITEM.pANTRYORDERSITEMDo.UseDB(db, opts...)
	_pANTRYORDERSITEM.pANTRYORDERSITEMDo.UseModel(&model.PANTRYORDERSITEM{})

	tableName := _pANTRYORDERSITEM.pANTRYORDERSITEMDo.TableName()
	_pANTRYORDERSITEM.ALL = field.NewAsterisk(tableName)
	_pANTRYORDERSITEM.ORDERID = field.NewString(tableName, "ORDER_ID")
	_pANTRYORDERSITEM.ITEMID = field.NewInt64(tableName, "ITEM_ID")
	_pANTRYORDERSITEM.ITEMCODE = field.NewString(tableName, "ITEM_CODE")
	_pANTRYORDERSITEM.QTY = field.NewInt64(tableName, "QTY")
	_pANTRYORDERSITEM.ORDERITEMSTATUS = field.NewInt64(tableName, "ORDER_ITEM_STATUS")
	_pANTRYORDERSITEM.COMMENT = field.NewString(tableName, "COMMENT")

	_pANTRYORDERSITEM.fillFieldMap()

	return _pANTRYORDERSITEM
}

type pANTRYORDERSITEM struct {
	pANTRYORDERSITEMDo

	ALL             field.Asterisk
	ORDERID         field.String
	ITEMID          field.Int64
	ITEMCODE        field.String
	QTY             field.Int64
	ORDERITEMSTATUS field.Int64
	COMMENT         field.String

	fieldMap map[string]field.Expr
}

func (p pANTRYORDERSITEM) Table(newTableName string) *pANTRYORDERSITEM {
	p.pANTRYORDERSITEMDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pANTRYORDERSITEM) As(alias string) *pANTRYORDERSITEM {
	p.pANTRYORDERSITEMDo.DO = *(p.pANTRYORDERSITEMDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pANTRYORDERSITEM) updateTableName(table string) *pANTRYORDERSITEM {
	p.ALL = field.NewAsterisk(table)
	p.ORDERID = field.NewString(table, "ORDER_ID")
	p.ITEMID = field.NewInt64(table, "ITEM_ID")
	p.ITEMCODE = field.NewString(table, "ITEM_CODE")
	p.QTY = field.NewInt64(table, "QTY")
	p.ORDERITEMSTATUS = field.NewInt64(table, "ORDER_ITEM_STATUS")
	p.COMMENT = field.NewString(table, "COMMENT")

	p.fillFieldMap()

	return p
}

func (p *pANTRYORDERSITEM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pANTRYORDERSITEM) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["ORDER_ID"] = p.ORDERID
	p.fieldMap["ITEM_ID"] = p.ITEMID
	p.fieldMap["ITEM_CODE"] = p.ITEMCODE
	p.fieldMap["QTY"] = p.QTY
	p.fieldMap["ORDER_ITEM_STATUS"] = p.ORDERITEMSTATUS
	p.fieldMap["COMMENT"] = p.COMMENT
}

func (p pANTRYORDERSITEM) clone(db *gorm.DB) pANTRYORDERSITEM {
	p.pANTRYORDERSITEMDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pANTRYORDERSITEM) replaceDB(db *gorm.DB) pANTRYORDERSITEM {
	p.pANTRYORDERSITEMDo.ReplaceDB(db)
	return p
}

type pANTRYORDERSITEMDo struct{ gen.DO }

func (p pANTRYORDERSITEMDo) Debug() *pANTRYORDERSITEMDo {
	return p.withDO(p.DO.Debug())
}

func (p pANTRYORDERSITEMDo) WithContext(ctx context.Context) *pANTRYORDERSITEMDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pANTRYORDERSITEMDo) ReadDB() *pANTRYORDERSITEMDo {
	return p.Clauses(dbresolver.Read)
}

func (p pANTRYORDERSITEMDo) WriteDB() *pANTRYORDERSITEMDo {
	return p.Clauses(dbresolver.Write)
}

func (p pANTRYORDERSITEMDo) Session(config *gorm.Session) *pANTRYORDERSITEMDo {
	return p.withDO(p.DO.Session(config))
}

func (p pANTRYORDERSITEMDo) Clauses(conds ...clause.Expression) *pANTRYORDERSITEMDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pANTRYORDERSITEMDo) Returning(value interface{}, columns ...string) *pANTRYORDERSITEMDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pANTRYORDERSITEMDo) Not(conds ...gen.Condition) *pANTRYORDERSITEMDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pANTRYORDERSITEMDo) Or(conds ...gen.Condition) *pANTRYORDERSITEMDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pANTRYORDERSITEMDo) Select(conds ...field.Expr) *pANTRYORDERSITEMDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pANTRYORDERSITEMDo) Where(conds ...gen.Condition) *pANTRYORDERSITEMDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pANTRYORDERSITEMDo) Order(conds ...field.Expr) *pANTRYORDERSITEMDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pANTRYORDERSITEMDo) Distinct(cols ...field.Expr) *pANTRYORDERSITEMDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pANTRYORDERSITEMDo) Omit(cols ...field.Expr) *pANTRYORDERSITEMDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pANTRYORDERSITEMDo) Join(table schema.Tabler, on ...field.Expr) *pANTRYORDERSITEMDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pANTRYORDERSITEMDo) LeftJoin(table schema.Tabler, on ...field.Expr) *pANTRYORDERSITEMDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pANTRYORDERSITEMDo) RightJoin(table schema.Tabler, on ...field.Expr) *pANTRYORDERSITEMDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pANTRYORDERSITEMDo) Group(cols ...field.Expr) *pANTRYORDERSITEMDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pANTRYORDERSITEMDo) Having(conds ...gen.Condition) *pANTRYORDERSITEMDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pANTRYORDERSITEMDo) Limit(limit int) *pANTRYORDERSITEMDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pANTRYORDERSITEMDo) Offset(offset int) *pANTRYORDERSITEMDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pANTRYORDERSITEMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *pANTRYORDERSITEMDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pANTRYORDERSITEMDo) Unscoped() *pANTRYORDERSITEMDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pANTRYORDERSITEMDo) Create(values ...*model.PANTRYORDERSITEM) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pANTRYORDERSITEMDo) CreateInBatches(values []*model.PANTRYORDERSITEM, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pANTRYORDERSITEMDo) Save(values ...*model.PANTRYORDERSITEM) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pANTRYORDERSITEMDo) First() (*model.PANTRYORDERSITEM, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PANTRYORDERSITEM), nil
	}
}

func (p pANTRYORDERSITEMDo) Take() (*model.PANTRYORDERSITEM, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PANTRYORDERSITEM), nil
	}
}

func (p pANTRYORDERSITEMDo) Last() (*model.PANTRYORDERSITEM, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PANTRYORDERSITEM), nil
	}
}

func (p pANTRYORDERSITEMDo) Find() ([]*model.PANTRYORDERSITEM, error) {
	result, err := p.DO.Find()
	return result.([]*model.PANTRYORDERSITEM), err
}

func (p pANTRYORDERSITEMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PANTRYORDERSITEM, err error) {
	buf := make([]*model.PANTRYORDERSITEM, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pANTRYORDERSITEMDo) FindInBatches(result *[]*model.PANTRYORDERSITEM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pANTRYORDERSITEMDo) Attrs(attrs ...field.AssignExpr) *pANTRYORDERSITEMDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pANTRYORDERSITEMDo) Assign(attrs ...field.AssignExpr) *pANTRYORDERSITEMDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pANTRYORDERSITEMDo) Joins(fields ...field.RelationField) *pANTRYORDERSITEMDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pANTRYORDERSITEMDo) Preload(fields ...field.RelationField) *pANTRYORDERSITEMDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pANTRYORDERSITEMDo) FirstOrInit() (*model.PANTRYORDERSITEM, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PANTRYORDERSITEM), nil
	}
}

func (p pANTRYORDERSITEMDo) FirstOrCreate() (*model.PANTRYORDERSITEM, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PANTRYORDERSITEM), nil
	}
}

func (p pANTRYORDERSITEMDo) FindByPage(offset int, limit int) (result []*model.PANTRYORDERSITEM, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pANTRYORDERSITEMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pANTRYORDERSITEMDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pANTRYORDERSITEMDo) Delete(models ...*model.PANTRYORDERSITEM) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pANTRYORDERSITEMDo) withDO(do gen.Dao) *pANTRYORDERSITEMDo {
	p.DO = *do.(*gen.DO)
	return p
}
