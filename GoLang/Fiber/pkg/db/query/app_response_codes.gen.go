// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"SMART_OFFICE_APP/pkg/db/model"
)

func newAPPRESPONSECODE(db *gorm.DB, opts ...gen.DOOption) aPPRESPONSECODE {
	_aPPRESPONSECODE := aPPRESPONSECODE{}

	_aPPRESPONSECODE.aPPRESPONSECODEDo.UseDB(db, opts...)
	_aPPRESPONSECODE.aPPRESPONSECODEDo.UseModel(&model.APPRESPONSECODE{})

	tableName := _aPPRESPONSECODE.aPPRESPONSECODEDo.TableName()
	_aPPRESPONSECODE.ALL = field.NewAsterisk(tableName)
	_aPPRESPONSECODE.RESCODE = field.NewString(tableName, "RES_CODE")
	_aPPRESPONSECODE.ERRORCODE = field.NewString(tableName, "ERROR_CODE")
	_aPPRESPONSECODE.DESCRIPTION = field.NewString(tableName, "DESCRIPTION")
	_aPPRESPONSECODE.DESCRIPTIONLOCAL = field.NewString(tableName, "DESCRIPTION_LOCAL")
	_aPPRESPONSECODE.RESPONSE = field.NewString(tableName, "RESPONSE")
	_aPPRESPONSECODE.RESPONSELOCAL = field.NewString(tableName, "RESPONSE_LOCAL")
	_aPPRESPONSECODE.CATEGORY = field.NewInt64(tableName, "CATEGORY")

	_aPPRESPONSECODE.fillFieldMap()

	return _aPPRESPONSECODE
}

type aPPRESPONSECODE struct {
	aPPRESPONSECODEDo

	ALL              field.Asterisk
	RESCODE          field.String
	ERRORCODE        field.String
	DESCRIPTION      field.String
	DESCRIPTIONLOCAL field.String
	RESPONSE         field.String
	RESPONSELOCAL    field.String
	CATEGORY         field.Int64

	fieldMap map[string]field.Expr
}

func (a aPPRESPONSECODE) Table(newTableName string) *aPPRESPONSECODE {
	a.aPPRESPONSECODEDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aPPRESPONSECODE) As(alias string) *aPPRESPONSECODE {
	a.aPPRESPONSECODEDo.DO = *(a.aPPRESPONSECODEDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aPPRESPONSECODE) updateTableName(table string) *aPPRESPONSECODE {
	a.ALL = field.NewAsterisk(table)
	a.RESCODE = field.NewString(table, "RES_CODE")
	a.ERRORCODE = field.NewString(table, "ERROR_CODE")
	a.DESCRIPTION = field.NewString(table, "DESCRIPTION")
	a.DESCRIPTIONLOCAL = field.NewString(table, "DESCRIPTION_LOCAL")
	a.RESPONSE = field.NewString(table, "RESPONSE")
	a.RESPONSELOCAL = field.NewString(table, "RESPONSE_LOCAL")
	a.CATEGORY = field.NewInt64(table, "CATEGORY")

	a.fillFieldMap()

	return a
}

func (a *aPPRESPONSECODE) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aPPRESPONSECODE) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["RES_CODE"] = a.RESCODE
	a.fieldMap["ERROR_CODE"] = a.ERRORCODE
	a.fieldMap["DESCRIPTION"] = a.DESCRIPTION
	a.fieldMap["DESCRIPTION_LOCAL"] = a.DESCRIPTIONLOCAL
	a.fieldMap["RESPONSE"] = a.RESPONSE
	a.fieldMap["RESPONSE_LOCAL"] = a.RESPONSELOCAL
	a.fieldMap["CATEGORY"] = a.CATEGORY
}

func (a aPPRESPONSECODE) clone(db *gorm.DB) aPPRESPONSECODE {
	a.aPPRESPONSECODEDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aPPRESPONSECODE) replaceDB(db *gorm.DB) aPPRESPONSECODE {
	a.aPPRESPONSECODEDo.ReplaceDB(db)
	return a
}

type aPPRESPONSECODEDo struct{ gen.DO }

func (a aPPRESPONSECODEDo) Debug() *aPPRESPONSECODEDo {
	return a.withDO(a.DO.Debug())
}

func (a aPPRESPONSECODEDo) WithContext(ctx context.Context) *aPPRESPONSECODEDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aPPRESPONSECODEDo) ReadDB() *aPPRESPONSECODEDo {
	return a.Clauses(dbresolver.Read)
}

func (a aPPRESPONSECODEDo) WriteDB() *aPPRESPONSECODEDo {
	return a.Clauses(dbresolver.Write)
}

func (a aPPRESPONSECODEDo) Session(config *gorm.Session) *aPPRESPONSECODEDo {
	return a.withDO(a.DO.Session(config))
}

func (a aPPRESPONSECODEDo) Clauses(conds ...clause.Expression) *aPPRESPONSECODEDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aPPRESPONSECODEDo) Returning(value interface{}, columns ...string) *aPPRESPONSECODEDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aPPRESPONSECODEDo) Not(conds ...gen.Condition) *aPPRESPONSECODEDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aPPRESPONSECODEDo) Or(conds ...gen.Condition) *aPPRESPONSECODEDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aPPRESPONSECODEDo) Select(conds ...field.Expr) *aPPRESPONSECODEDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aPPRESPONSECODEDo) Where(conds ...gen.Condition) *aPPRESPONSECODEDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aPPRESPONSECODEDo) Order(conds ...field.Expr) *aPPRESPONSECODEDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aPPRESPONSECODEDo) Distinct(cols ...field.Expr) *aPPRESPONSECODEDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aPPRESPONSECODEDo) Omit(cols ...field.Expr) *aPPRESPONSECODEDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aPPRESPONSECODEDo) Join(table schema.Tabler, on ...field.Expr) *aPPRESPONSECODEDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aPPRESPONSECODEDo) LeftJoin(table schema.Tabler, on ...field.Expr) *aPPRESPONSECODEDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aPPRESPONSECODEDo) RightJoin(table schema.Tabler, on ...field.Expr) *aPPRESPONSECODEDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aPPRESPONSECODEDo) Group(cols ...field.Expr) *aPPRESPONSECODEDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aPPRESPONSECODEDo) Having(conds ...gen.Condition) *aPPRESPONSECODEDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aPPRESPONSECODEDo) Limit(limit int) *aPPRESPONSECODEDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aPPRESPONSECODEDo) Offset(offset int) *aPPRESPONSECODEDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aPPRESPONSECODEDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *aPPRESPONSECODEDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aPPRESPONSECODEDo) Unscoped() *aPPRESPONSECODEDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aPPRESPONSECODEDo) Create(values ...*model.APPRESPONSECODE) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aPPRESPONSECODEDo) CreateInBatches(values []*model.APPRESPONSECODE, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aPPRESPONSECODEDo) Save(values ...*model.APPRESPONSECODE) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aPPRESPONSECODEDo) First() (*model.APPRESPONSECODE, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPRESPONSECODE), nil
	}
}

func (a aPPRESPONSECODEDo) Take() (*model.APPRESPONSECODE, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPRESPONSECODE), nil
	}
}

func (a aPPRESPONSECODEDo) Last() (*model.APPRESPONSECODE, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPRESPONSECODE), nil
	}
}

func (a aPPRESPONSECODEDo) Find() ([]*model.APPRESPONSECODE, error) {
	result, err := a.DO.Find()
	return result.([]*model.APPRESPONSECODE), err
}

func (a aPPRESPONSECODEDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APPRESPONSECODE, err error) {
	buf := make([]*model.APPRESPONSECODE, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aPPRESPONSECODEDo) FindInBatches(result *[]*model.APPRESPONSECODE, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aPPRESPONSECODEDo) Attrs(attrs ...field.AssignExpr) *aPPRESPONSECODEDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aPPRESPONSECODEDo) Assign(attrs ...field.AssignExpr) *aPPRESPONSECODEDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aPPRESPONSECODEDo) Joins(fields ...field.RelationField) *aPPRESPONSECODEDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aPPRESPONSECODEDo) Preload(fields ...field.RelationField) *aPPRESPONSECODEDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aPPRESPONSECODEDo) FirstOrInit() (*model.APPRESPONSECODE, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPRESPONSECODE), nil
	}
}

func (a aPPRESPONSECODEDo) FirstOrCreate() (*model.APPRESPONSECODE, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPRESPONSECODE), nil
	}
}

func (a aPPRESPONSECODEDo) FindByPage(offset int, limit int) (result []*model.APPRESPONSECODE, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aPPRESPONSECODEDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aPPRESPONSECODEDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aPPRESPONSECODEDo) Delete(models ...*model.APPRESPONSECODE) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aPPRESPONSECODEDo) withDO(do gen.Dao) *aPPRESPONSECODEDo {
	a.DO = *do.(*gen.DO)
	return a
}
