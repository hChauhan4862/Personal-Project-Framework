// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"SMART_OFFICE_APP/pkg/db/model"
)

func newCOMMUNICATIONEMAIL(db *gorm.DB, opts ...gen.DOOption) cOMMUNICATIONEMAIL {
	_cOMMUNICATIONEMAIL := cOMMUNICATIONEMAIL{}

	_cOMMUNICATIONEMAIL.cOMMUNICATIONEMAILDo.UseDB(db, opts...)
	_cOMMUNICATIONEMAIL.cOMMUNICATIONEMAILDo.UseModel(&model.COMMUNICATIONEMAIL{})

	tableName := _cOMMUNICATIONEMAIL.cOMMUNICATIONEMAILDo.TableName()
	_cOMMUNICATIONEMAIL.ALL = field.NewAsterisk(tableName)
	_cOMMUNICATIONEMAIL.SEQ = field.NewInt64(tableName, "SEQ")
	_cOMMUNICATIONEMAIL.EMAILID = field.NewString(tableName, "EMAIL_ID")
	_cOMMUNICATIONEMAIL.EMAILTO = field.NewString(tableName, "EMAIL_TO")
	_cOMMUNICATIONEMAIL.EMAILCC = field.NewString(tableName, "EMAIL_CC")
	_cOMMUNICATIONEMAIL.EMAILBCC = field.NewString(tableName, "EMAIL_BCC")
	_cOMMUNICATIONEMAIL.EMAILSUBJECT = field.NewString(tableName, "EMAIL_SUBJECT")
	_cOMMUNICATIONEMAIL.EMAILBODY = field.NewString(tableName, "EMAIL_BODY")
	_cOMMUNICATIONEMAIL.EMAILSTATUS = field.NewBool(tableName, "EMAIL_STATUS")
	_cOMMUNICATIONEMAIL.EMAILAT = field.NewString(tableName, "EMAIL_AT")
	_cOMMUNICATIONEMAIL.EMAILEXPIRE = field.NewString(tableName, "EMAIL_EXPIRE")
	_cOMMUNICATIONEMAIL.EMAILTYPE = field.NewString(tableName, "EMAIL_TYPE")
	_cOMMUNICATIONEMAIL.CREATEDBY = field.NewString(tableName, "CREATED_BY")
	_cOMMUNICATIONEMAIL.UPDATEDBY = field.NewString(tableName, "UPDATED_BY")
	_cOMMUNICATIONEMAIL.CREATEDAT = field.NewString(tableName, "CREATED_AT")
	_cOMMUNICATIONEMAIL.UPDATEDAT = field.NewString(tableName, "UPDATED_AT")

	_cOMMUNICATIONEMAIL.fillFieldMap()

	return _cOMMUNICATIONEMAIL
}

type cOMMUNICATIONEMAIL struct {
	cOMMUNICATIONEMAILDo

	ALL          field.Asterisk
	SEQ          field.Int64
	EMAILID      field.String
	EMAILTO      field.String
	EMAILCC      field.String
	EMAILBCC     field.String
	EMAILSUBJECT field.String
	EMAILBODY    field.String
	EMAILSTATUS  field.Bool
	EMAILAT      field.String
	EMAILEXPIRE  field.String
	EMAILTYPE    field.String
	CREATEDBY    field.String
	UPDATEDBY    field.String
	CREATEDAT    field.String
	UPDATEDAT    field.String

	fieldMap map[string]field.Expr
}

func (c cOMMUNICATIONEMAIL) Table(newTableName string) *cOMMUNICATIONEMAIL {
	c.cOMMUNICATIONEMAILDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cOMMUNICATIONEMAIL) As(alias string) *cOMMUNICATIONEMAIL {
	c.cOMMUNICATIONEMAILDo.DO = *(c.cOMMUNICATIONEMAILDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cOMMUNICATIONEMAIL) updateTableName(table string) *cOMMUNICATIONEMAIL {
	c.ALL = field.NewAsterisk(table)
	c.SEQ = field.NewInt64(table, "SEQ")
	c.EMAILID = field.NewString(table, "EMAIL_ID")
	c.EMAILTO = field.NewString(table, "EMAIL_TO")
	c.EMAILCC = field.NewString(table, "EMAIL_CC")
	c.EMAILBCC = field.NewString(table, "EMAIL_BCC")
	c.EMAILSUBJECT = field.NewString(table, "EMAIL_SUBJECT")
	c.EMAILBODY = field.NewString(table, "EMAIL_BODY")
	c.EMAILSTATUS = field.NewBool(table, "EMAIL_STATUS")
	c.EMAILAT = field.NewString(table, "EMAIL_AT")
	c.EMAILEXPIRE = field.NewString(table, "EMAIL_EXPIRE")
	c.EMAILTYPE = field.NewString(table, "EMAIL_TYPE")
	c.CREATEDBY = field.NewString(table, "CREATED_BY")
	c.UPDATEDBY = field.NewString(table, "UPDATED_BY")
	c.CREATEDAT = field.NewString(table, "CREATED_AT")
	c.UPDATEDAT = field.NewString(table, "UPDATED_AT")

	c.fillFieldMap()

	return c
}

func (c *cOMMUNICATIONEMAIL) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cOMMUNICATIONEMAIL) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 15)
	c.fieldMap["SEQ"] = c.SEQ
	c.fieldMap["EMAIL_ID"] = c.EMAILID
	c.fieldMap["EMAIL_TO"] = c.EMAILTO
	c.fieldMap["EMAIL_CC"] = c.EMAILCC
	c.fieldMap["EMAIL_BCC"] = c.EMAILBCC
	c.fieldMap["EMAIL_SUBJECT"] = c.EMAILSUBJECT
	c.fieldMap["EMAIL_BODY"] = c.EMAILBODY
	c.fieldMap["EMAIL_STATUS"] = c.EMAILSTATUS
	c.fieldMap["EMAIL_AT"] = c.EMAILAT
	c.fieldMap["EMAIL_EXPIRE"] = c.EMAILEXPIRE
	c.fieldMap["EMAIL_TYPE"] = c.EMAILTYPE
	c.fieldMap["CREATED_BY"] = c.CREATEDBY
	c.fieldMap["UPDATED_BY"] = c.UPDATEDBY
	c.fieldMap["CREATED_AT"] = c.CREATEDAT
	c.fieldMap["UPDATED_AT"] = c.UPDATEDAT
}

func (c cOMMUNICATIONEMAIL) clone(db *gorm.DB) cOMMUNICATIONEMAIL {
	c.cOMMUNICATIONEMAILDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cOMMUNICATIONEMAIL) replaceDB(db *gorm.DB) cOMMUNICATIONEMAIL {
	c.cOMMUNICATIONEMAILDo.ReplaceDB(db)
	return c
}

type cOMMUNICATIONEMAILDo struct{ gen.DO }

func (c cOMMUNICATIONEMAILDo) Debug() *cOMMUNICATIONEMAILDo {
	return c.withDO(c.DO.Debug())
}

func (c cOMMUNICATIONEMAILDo) WithContext(ctx context.Context) *cOMMUNICATIONEMAILDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cOMMUNICATIONEMAILDo) ReadDB() *cOMMUNICATIONEMAILDo {
	return c.Clauses(dbresolver.Read)
}

func (c cOMMUNICATIONEMAILDo) WriteDB() *cOMMUNICATIONEMAILDo {
	return c.Clauses(dbresolver.Write)
}

func (c cOMMUNICATIONEMAILDo) Session(config *gorm.Session) *cOMMUNICATIONEMAILDo {
	return c.withDO(c.DO.Session(config))
}

func (c cOMMUNICATIONEMAILDo) Clauses(conds ...clause.Expression) *cOMMUNICATIONEMAILDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cOMMUNICATIONEMAILDo) Returning(value interface{}, columns ...string) *cOMMUNICATIONEMAILDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cOMMUNICATIONEMAILDo) Not(conds ...gen.Condition) *cOMMUNICATIONEMAILDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cOMMUNICATIONEMAILDo) Or(conds ...gen.Condition) *cOMMUNICATIONEMAILDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cOMMUNICATIONEMAILDo) Select(conds ...field.Expr) *cOMMUNICATIONEMAILDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cOMMUNICATIONEMAILDo) Where(conds ...gen.Condition) *cOMMUNICATIONEMAILDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cOMMUNICATIONEMAILDo) Order(conds ...field.Expr) *cOMMUNICATIONEMAILDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cOMMUNICATIONEMAILDo) Distinct(cols ...field.Expr) *cOMMUNICATIONEMAILDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cOMMUNICATIONEMAILDo) Omit(cols ...field.Expr) *cOMMUNICATIONEMAILDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cOMMUNICATIONEMAILDo) Join(table schema.Tabler, on ...field.Expr) *cOMMUNICATIONEMAILDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cOMMUNICATIONEMAILDo) LeftJoin(table schema.Tabler, on ...field.Expr) *cOMMUNICATIONEMAILDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cOMMUNICATIONEMAILDo) RightJoin(table schema.Tabler, on ...field.Expr) *cOMMUNICATIONEMAILDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cOMMUNICATIONEMAILDo) Group(cols ...field.Expr) *cOMMUNICATIONEMAILDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cOMMUNICATIONEMAILDo) Having(conds ...gen.Condition) *cOMMUNICATIONEMAILDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cOMMUNICATIONEMAILDo) Limit(limit int) *cOMMUNICATIONEMAILDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cOMMUNICATIONEMAILDo) Offset(offset int) *cOMMUNICATIONEMAILDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cOMMUNICATIONEMAILDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *cOMMUNICATIONEMAILDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cOMMUNICATIONEMAILDo) Unscoped() *cOMMUNICATIONEMAILDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cOMMUNICATIONEMAILDo) Create(values ...*model.COMMUNICATIONEMAIL) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cOMMUNICATIONEMAILDo) CreateInBatches(values []*model.COMMUNICATIONEMAIL, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cOMMUNICATIONEMAILDo) Save(values ...*model.COMMUNICATIONEMAIL) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cOMMUNICATIONEMAILDo) First() (*model.COMMUNICATIONEMAIL, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.COMMUNICATIONEMAIL), nil
	}
}

func (c cOMMUNICATIONEMAILDo) Take() (*model.COMMUNICATIONEMAIL, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.COMMUNICATIONEMAIL), nil
	}
}

func (c cOMMUNICATIONEMAILDo) Last() (*model.COMMUNICATIONEMAIL, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.COMMUNICATIONEMAIL), nil
	}
}

func (c cOMMUNICATIONEMAILDo) Find() ([]*model.COMMUNICATIONEMAIL, error) {
	result, err := c.DO.Find()
	return result.([]*model.COMMUNICATIONEMAIL), err
}

func (c cOMMUNICATIONEMAILDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.COMMUNICATIONEMAIL, err error) {
	buf := make([]*model.COMMUNICATIONEMAIL, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cOMMUNICATIONEMAILDo) FindInBatches(result *[]*model.COMMUNICATIONEMAIL, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cOMMUNICATIONEMAILDo) Attrs(attrs ...field.AssignExpr) *cOMMUNICATIONEMAILDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cOMMUNICATIONEMAILDo) Assign(attrs ...field.AssignExpr) *cOMMUNICATIONEMAILDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cOMMUNICATIONEMAILDo) Joins(fields ...field.RelationField) *cOMMUNICATIONEMAILDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cOMMUNICATIONEMAILDo) Preload(fields ...field.RelationField) *cOMMUNICATIONEMAILDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cOMMUNICATIONEMAILDo) FirstOrInit() (*model.COMMUNICATIONEMAIL, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.COMMUNICATIONEMAIL), nil
	}
}

func (c cOMMUNICATIONEMAILDo) FirstOrCreate() (*model.COMMUNICATIONEMAIL, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.COMMUNICATIONEMAIL), nil
	}
}

func (c cOMMUNICATIONEMAILDo) FindByPage(offset int, limit int) (result []*model.COMMUNICATIONEMAIL, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cOMMUNICATIONEMAILDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cOMMUNICATIONEMAILDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cOMMUNICATIONEMAILDo) Delete(models ...*model.COMMUNICATIONEMAIL) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cOMMUNICATIONEMAILDo) withDO(do gen.Dao) *cOMMUNICATIONEMAILDo {
	c.DO = *do.(*gen.DO)
	return c
}
