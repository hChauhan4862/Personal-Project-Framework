// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"SMART_OFFICE_APP/pkg/db/model"
)

func newVMSBOOKING(db *gorm.DB, opts ...gen.DOOption) vMSBOOKING {
	_vMSBOOKING := vMSBOOKING{}

	_vMSBOOKING.vMSBOOKINGDo.UseDB(db, opts...)
	_vMSBOOKING.vMSBOOKINGDo.UseModel(&model.VMSBOOKING{})

	tableName := _vMSBOOKING.vMSBOOKINGDo.TableName()
	_vMSBOOKING.ALL = field.NewAsterisk(tableName)
	_vMSBOOKING.BOOKINGID = field.NewString(tableName, "BOOKING_ID")
	_vMSBOOKING.ROOMID = field.NewInt64(tableName, "ROOM_ID")
	_vMSBOOKING.ROOMNO = field.NewString(tableName, "ROOM_NO")
	_vMSBOOKING.FLOORID = field.NewInt64(tableName, "FLOOR_ID")
	_vMSBOOKING.FLOORNO = field.NewString(tableName, "FLOOR_NO")
	_vMSBOOKING.OFFICEID = field.NewInt64(tableName, "OFFICE_ID")
	_vMSBOOKING.OFFICENAME = field.NewString(tableName, "OFFICE_NAME")
	_vMSBOOKING.USERID = field.NewString(tableName, "USER_ID")
	_vMSBOOKING.USERNAME = field.NewString(tableName, "USER_NAME")
	_vMSBOOKING.USERIDENTITYCODE = field.NewString(tableName, "USER_IDENTITY_CODE")
	_vMSBOOKING.USERDEPARTMENTCODE = field.NewString(tableName, "USER_DEPARTMENT_CODE")
	_vMSBOOKING.USERTYPE = field.NewString(tableName, "USER_TYPE")
	_vMSBOOKING.BOOKINGMODE = field.NewString(tableName, "BOOKING_MODE")
	_vMSBOOKING.DEVICEID = field.NewString(tableName, "DEVICE_ID")
	_vMSBOOKING.STATUS = field.NewString(tableName, "STATUS")
	_vMSBOOKING.CONFIRMATIONDATETIME = field.NewString(tableName, "CONFIRMATION_DATE_TIME")
	_vMSBOOKING.CANCELLATIONDATETIME = field.NewString(tableName, "CANCELLATION_DATE_TIME")
	_vMSBOOKING.RETURNDATETIME = field.NewString(tableName, "RETURN_DATE_TIME")
	_vMSBOOKING.COMPLETEDATETIME = field.NewString(tableName, "COMPLETE_DATE_TIME")
	_vMSBOOKING.BOOKINGSTARTDATETIME = field.NewString(tableName, "BOOKING_START_DATE_TIME")
	_vMSBOOKING.BOOKINGENDDATETIME = field.NewString(tableName, "BOOKING_END_DATE_TIME")
	_vMSBOOKING.BOOKINGDATETIME = field.NewString(tableName, "BOOKING_DATE_TIME")

	_vMSBOOKING.fillFieldMap()

	return _vMSBOOKING
}

type vMSBOOKING struct {
	vMSBOOKINGDo

	ALL                  field.Asterisk
	BOOKINGID            field.String
	ROOMID               field.Int64
	ROOMNO               field.String
	FLOORID              field.Int64
	FLOORNO              field.String
	OFFICEID             field.Int64
	OFFICENAME           field.String
	USERID               field.String
	USERNAME             field.String
	USERIDENTITYCODE     field.String
	USERDEPARTMENTCODE   field.String
	USERTYPE             field.String
	BOOKINGMODE          field.String
	DEVICEID             field.String
	STATUS               field.String
	CONFIRMATIONDATETIME field.String
	CANCELLATIONDATETIME field.String
	RETURNDATETIME       field.String
	COMPLETEDATETIME     field.String
	BOOKINGSTARTDATETIME field.String
	BOOKINGENDDATETIME   field.String
	BOOKINGDATETIME      field.String

	fieldMap map[string]field.Expr
}

func (v vMSBOOKING) Table(newTableName string) *vMSBOOKING {
	v.vMSBOOKINGDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v vMSBOOKING) As(alias string) *vMSBOOKING {
	v.vMSBOOKINGDo.DO = *(v.vMSBOOKINGDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *vMSBOOKING) updateTableName(table string) *vMSBOOKING {
	v.ALL = field.NewAsterisk(table)
	v.BOOKINGID = field.NewString(table, "BOOKING_ID")
	v.ROOMID = field.NewInt64(table, "ROOM_ID")
	v.ROOMNO = field.NewString(table, "ROOM_NO")
	v.FLOORID = field.NewInt64(table, "FLOOR_ID")
	v.FLOORNO = field.NewString(table, "FLOOR_NO")
	v.OFFICEID = field.NewInt64(table, "OFFICE_ID")
	v.OFFICENAME = field.NewString(table, "OFFICE_NAME")
	v.USERID = field.NewString(table, "USER_ID")
	v.USERNAME = field.NewString(table, "USER_NAME")
	v.USERIDENTITYCODE = field.NewString(table, "USER_IDENTITY_CODE")
	v.USERDEPARTMENTCODE = field.NewString(table, "USER_DEPARTMENT_CODE")
	v.USERTYPE = field.NewString(table, "USER_TYPE")
	v.BOOKINGMODE = field.NewString(table, "BOOKING_MODE")
	v.DEVICEID = field.NewString(table, "DEVICE_ID")
	v.STATUS = field.NewString(table, "STATUS")
	v.CONFIRMATIONDATETIME = field.NewString(table, "CONFIRMATION_DATE_TIME")
	v.CANCELLATIONDATETIME = field.NewString(table, "CANCELLATION_DATE_TIME")
	v.RETURNDATETIME = field.NewString(table, "RETURN_DATE_TIME")
	v.COMPLETEDATETIME = field.NewString(table, "COMPLETE_DATE_TIME")
	v.BOOKINGSTARTDATETIME = field.NewString(table, "BOOKING_START_DATE_TIME")
	v.BOOKINGENDDATETIME = field.NewString(table, "BOOKING_END_DATE_TIME")
	v.BOOKINGDATETIME = field.NewString(table, "BOOKING_DATE_TIME")

	v.fillFieldMap()

	return v
}

func (v *vMSBOOKING) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *vMSBOOKING) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 22)
	v.fieldMap["BOOKING_ID"] = v.BOOKINGID
	v.fieldMap["ROOM_ID"] = v.ROOMID
	v.fieldMap["ROOM_NO"] = v.ROOMNO
	v.fieldMap["FLOOR_ID"] = v.FLOORID
	v.fieldMap["FLOOR_NO"] = v.FLOORNO
	v.fieldMap["OFFICE_ID"] = v.OFFICEID
	v.fieldMap["OFFICE_NAME"] = v.OFFICENAME
	v.fieldMap["USER_ID"] = v.USERID
	v.fieldMap["USER_NAME"] = v.USERNAME
	v.fieldMap["USER_IDENTITY_CODE"] = v.USERIDENTITYCODE
	v.fieldMap["USER_DEPARTMENT_CODE"] = v.USERDEPARTMENTCODE
	v.fieldMap["USER_TYPE"] = v.USERTYPE
	v.fieldMap["BOOKING_MODE"] = v.BOOKINGMODE
	v.fieldMap["DEVICE_ID"] = v.DEVICEID
	v.fieldMap["STATUS"] = v.STATUS
	v.fieldMap["CONFIRMATION_DATE_TIME"] = v.CONFIRMATIONDATETIME
	v.fieldMap["CANCELLATION_DATE_TIME"] = v.CANCELLATIONDATETIME
	v.fieldMap["RETURN_DATE_TIME"] = v.RETURNDATETIME
	v.fieldMap["COMPLETE_DATE_TIME"] = v.COMPLETEDATETIME
	v.fieldMap["BOOKING_START_DATE_TIME"] = v.BOOKINGSTARTDATETIME
	v.fieldMap["BOOKING_END_DATE_TIME"] = v.BOOKINGENDDATETIME
	v.fieldMap["BOOKING_DATE_TIME"] = v.BOOKINGDATETIME
}

func (v vMSBOOKING) clone(db *gorm.DB) vMSBOOKING {
	v.vMSBOOKINGDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v vMSBOOKING) replaceDB(db *gorm.DB) vMSBOOKING {
	v.vMSBOOKINGDo.ReplaceDB(db)
	return v
}

type vMSBOOKINGDo struct{ gen.DO }

func (v vMSBOOKINGDo) Debug() *vMSBOOKINGDo {
	return v.withDO(v.DO.Debug())
}

func (v vMSBOOKINGDo) WithContext(ctx context.Context) *vMSBOOKINGDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v vMSBOOKINGDo) ReadDB() *vMSBOOKINGDo {
	return v.Clauses(dbresolver.Read)
}

func (v vMSBOOKINGDo) WriteDB() *vMSBOOKINGDo {
	return v.Clauses(dbresolver.Write)
}

func (v vMSBOOKINGDo) Session(config *gorm.Session) *vMSBOOKINGDo {
	return v.withDO(v.DO.Session(config))
}

func (v vMSBOOKINGDo) Clauses(conds ...clause.Expression) *vMSBOOKINGDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v vMSBOOKINGDo) Returning(value interface{}, columns ...string) *vMSBOOKINGDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v vMSBOOKINGDo) Not(conds ...gen.Condition) *vMSBOOKINGDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v vMSBOOKINGDo) Or(conds ...gen.Condition) *vMSBOOKINGDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v vMSBOOKINGDo) Select(conds ...field.Expr) *vMSBOOKINGDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v vMSBOOKINGDo) Where(conds ...gen.Condition) *vMSBOOKINGDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v vMSBOOKINGDo) Order(conds ...field.Expr) *vMSBOOKINGDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v vMSBOOKINGDo) Distinct(cols ...field.Expr) *vMSBOOKINGDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v vMSBOOKINGDo) Omit(cols ...field.Expr) *vMSBOOKINGDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v vMSBOOKINGDo) Join(table schema.Tabler, on ...field.Expr) *vMSBOOKINGDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v vMSBOOKINGDo) LeftJoin(table schema.Tabler, on ...field.Expr) *vMSBOOKINGDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v vMSBOOKINGDo) RightJoin(table schema.Tabler, on ...field.Expr) *vMSBOOKINGDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v vMSBOOKINGDo) Group(cols ...field.Expr) *vMSBOOKINGDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v vMSBOOKINGDo) Having(conds ...gen.Condition) *vMSBOOKINGDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v vMSBOOKINGDo) Limit(limit int) *vMSBOOKINGDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v vMSBOOKINGDo) Offset(offset int) *vMSBOOKINGDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v vMSBOOKINGDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *vMSBOOKINGDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v vMSBOOKINGDo) Unscoped() *vMSBOOKINGDo {
	return v.withDO(v.DO.Unscoped())
}

func (v vMSBOOKINGDo) Create(values ...*model.VMSBOOKING) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v vMSBOOKINGDo) CreateInBatches(values []*model.VMSBOOKING, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v vMSBOOKINGDo) Save(values ...*model.VMSBOOKING) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v vMSBOOKINGDo) First() (*model.VMSBOOKING, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VMSBOOKING), nil
	}
}

func (v vMSBOOKINGDo) Take() (*model.VMSBOOKING, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VMSBOOKING), nil
	}
}

func (v vMSBOOKINGDo) Last() (*model.VMSBOOKING, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VMSBOOKING), nil
	}
}

func (v vMSBOOKINGDo) Find() ([]*model.VMSBOOKING, error) {
	result, err := v.DO.Find()
	return result.([]*model.VMSBOOKING), err
}

func (v vMSBOOKINGDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VMSBOOKING, err error) {
	buf := make([]*model.VMSBOOKING, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v vMSBOOKINGDo) FindInBatches(result *[]*model.VMSBOOKING, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v vMSBOOKINGDo) Attrs(attrs ...field.AssignExpr) *vMSBOOKINGDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v vMSBOOKINGDo) Assign(attrs ...field.AssignExpr) *vMSBOOKINGDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v vMSBOOKINGDo) Joins(fields ...field.RelationField) *vMSBOOKINGDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v vMSBOOKINGDo) Preload(fields ...field.RelationField) *vMSBOOKINGDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v vMSBOOKINGDo) FirstOrInit() (*model.VMSBOOKING, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VMSBOOKING), nil
	}
}

func (v vMSBOOKINGDo) FirstOrCreate() (*model.VMSBOOKING, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VMSBOOKING), nil
	}
}

func (v vMSBOOKINGDo) FindByPage(offset int, limit int) (result []*model.VMSBOOKING, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v vMSBOOKINGDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v vMSBOOKINGDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v vMSBOOKINGDo) Delete(models ...*model.VMSBOOKING) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *vMSBOOKINGDo) withDO(do gen.Dao) *vMSBOOKINGDo {
	v.DO = *do.(*gen.DO)
	return v
}
