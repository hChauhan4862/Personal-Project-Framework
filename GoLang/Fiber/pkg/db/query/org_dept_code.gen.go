// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"SMART_OFFICE_APP/pkg/db/model"
)

func newORGDEPTCODE(db *gorm.DB, opts ...gen.DOOption) oRGDEPTCODE {
	_oRGDEPTCODE := oRGDEPTCODE{}

	_oRGDEPTCODE.oRGDEPTCODEDo.UseDB(db, opts...)
	_oRGDEPTCODE.oRGDEPTCODEDo.UseModel(&model.ORGDEPTCODE{})

	tableName := _oRGDEPTCODE.oRGDEPTCODEDo.TableName()
	_oRGDEPTCODE.ALL = field.NewAsterisk(tableName)
	_oRGDEPTCODE.DEPTSEQ = field.NewInt64(tableName, "DEPT_SEQ")
	_oRGDEPTCODE.DEPTCODE = field.NewString(tableName, "DEPT_CODE")
	_oRGDEPTCODE.DEPTNAME = field.NewString(tableName, "DEPT_NAME")

	_oRGDEPTCODE.fillFieldMap()

	return _oRGDEPTCODE
}

type oRGDEPTCODE struct {
	oRGDEPTCODEDo

	ALL      field.Asterisk
	DEPTSEQ  field.Int64
	DEPTCODE field.String
	DEPTNAME field.String

	fieldMap map[string]field.Expr
}

func (o oRGDEPTCODE) Table(newTableName string) *oRGDEPTCODE {
	o.oRGDEPTCODEDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o oRGDEPTCODE) As(alias string) *oRGDEPTCODE {
	o.oRGDEPTCODEDo.DO = *(o.oRGDEPTCODEDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *oRGDEPTCODE) updateTableName(table string) *oRGDEPTCODE {
	o.ALL = field.NewAsterisk(table)
	o.DEPTSEQ = field.NewInt64(table, "DEPT_SEQ")
	o.DEPTCODE = field.NewString(table, "DEPT_CODE")
	o.DEPTNAME = field.NewString(table, "DEPT_NAME")

	o.fillFieldMap()

	return o
}

func (o *oRGDEPTCODE) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *oRGDEPTCODE) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 3)
	o.fieldMap["DEPT_SEQ"] = o.DEPTSEQ
	o.fieldMap["DEPT_CODE"] = o.DEPTCODE
	o.fieldMap["DEPT_NAME"] = o.DEPTNAME
}

func (o oRGDEPTCODE) clone(db *gorm.DB) oRGDEPTCODE {
	o.oRGDEPTCODEDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o oRGDEPTCODE) replaceDB(db *gorm.DB) oRGDEPTCODE {
	o.oRGDEPTCODEDo.ReplaceDB(db)
	return o
}

type oRGDEPTCODEDo struct{ gen.DO }

func (o oRGDEPTCODEDo) Debug() *oRGDEPTCODEDo {
	return o.withDO(o.DO.Debug())
}

func (o oRGDEPTCODEDo) WithContext(ctx context.Context) *oRGDEPTCODEDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o oRGDEPTCODEDo) ReadDB() *oRGDEPTCODEDo {
	return o.Clauses(dbresolver.Read)
}

func (o oRGDEPTCODEDo) WriteDB() *oRGDEPTCODEDo {
	return o.Clauses(dbresolver.Write)
}

func (o oRGDEPTCODEDo) Session(config *gorm.Session) *oRGDEPTCODEDo {
	return o.withDO(o.DO.Session(config))
}

func (o oRGDEPTCODEDo) Clauses(conds ...clause.Expression) *oRGDEPTCODEDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o oRGDEPTCODEDo) Returning(value interface{}, columns ...string) *oRGDEPTCODEDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o oRGDEPTCODEDo) Not(conds ...gen.Condition) *oRGDEPTCODEDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o oRGDEPTCODEDo) Or(conds ...gen.Condition) *oRGDEPTCODEDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o oRGDEPTCODEDo) Select(conds ...field.Expr) *oRGDEPTCODEDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o oRGDEPTCODEDo) Where(conds ...gen.Condition) *oRGDEPTCODEDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o oRGDEPTCODEDo) Order(conds ...field.Expr) *oRGDEPTCODEDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o oRGDEPTCODEDo) Distinct(cols ...field.Expr) *oRGDEPTCODEDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o oRGDEPTCODEDo) Omit(cols ...field.Expr) *oRGDEPTCODEDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o oRGDEPTCODEDo) Join(table schema.Tabler, on ...field.Expr) *oRGDEPTCODEDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o oRGDEPTCODEDo) LeftJoin(table schema.Tabler, on ...field.Expr) *oRGDEPTCODEDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o oRGDEPTCODEDo) RightJoin(table schema.Tabler, on ...field.Expr) *oRGDEPTCODEDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o oRGDEPTCODEDo) Group(cols ...field.Expr) *oRGDEPTCODEDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o oRGDEPTCODEDo) Having(conds ...gen.Condition) *oRGDEPTCODEDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o oRGDEPTCODEDo) Limit(limit int) *oRGDEPTCODEDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o oRGDEPTCODEDo) Offset(offset int) *oRGDEPTCODEDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o oRGDEPTCODEDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *oRGDEPTCODEDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o oRGDEPTCODEDo) Unscoped() *oRGDEPTCODEDo {
	return o.withDO(o.DO.Unscoped())
}

func (o oRGDEPTCODEDo) Create(values ...*model.ORGDEPTCODE) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o oRGDEPTCODEDo) CreateInBatches(values []*model.ORGDEPTCODE, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o oRGDEPTCODEDo) Save(values ...*model.ORGDEPTCODE) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o oRGDEPTCODEDo) First() (*model.ORGDEPTCODE, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGDEPTCODE), nil
	}
}

func (o oRGDEPTCODEDo) Take() (*model.ORGDEPTCODE, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGDEPTCODE), nil
	}
}

func (o oRGDEPTCODEDo) Last() (*model.ORGDEPTCODE, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGDEPTCODE), nil
	}
}

func (o oRGDEPTCODEDo) Find() ([]*model.ORGDEPTCODE, error) {
	result, err := o.DO.Find()
	return result.([]*model.ORGDEPTCODE), err
}

func (o oRGDEPTCODEDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ORGDEPTCODE, err error) {
	buf := make([]*model.ORGDEPTCODE, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o oRGDEPTCODEDo) FindInBatches(result *[]*model.ORGDEPTCODE, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o oRGDEPTCODEDo) Attrs(attrs ...field.AssignExpr) *oRGDEPTCODEDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o oRGDEPTCODEDo) Assign(attrs ...field.AssignExpr) *oRGDEPTCODEDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o oRGDEPTCODEDo) Joins(fields ...field.RelationField) *oRGDEPTCODEDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o oRGDEPTCODEDo) Preload(fields ...field.RelationField) *oRGDEPTCODEDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o oRGDEPTCODEDo) FirstOrInit() (*model.ORGDEPTCODE, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGDEPTCODE), nil
	}
}

func (o oRGDEPTCODEDo) FirstOrCreate() (*model.ORGDEPTCODE, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGDEPTCODE), nil
	}
}

func (o oRGDEPTCODEDo) FindByPage(offset int, limit int) (result []*model.ORGDEPTCODE, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o oRGDEPTCODEDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o oRGDEPTCODEDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o oRGDEPTCODEDo) Delete(models ...*model.ORGDEPTCODE) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *oRGDEPTCODEDo) withDO(do gen.Dao) *oRGDEPTCODEDo {
	o.DO = *do.(*gen.DO)
	return o
}
