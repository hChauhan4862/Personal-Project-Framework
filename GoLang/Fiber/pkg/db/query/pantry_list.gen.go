// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"SMART_OFFICE_APP/pkg/db/model"
)

func newPANTRYLIST(db *gorm.DB, opts ...gen.DOOption) pANTRYLIST {
	_pANTRYLIST := pANTRYLIST{}

	_pANTRYLIST.pANTRYLISTDo.UseDB(db, opts...)
	_pANTRYLIST.pANTRYLISTDo.UseModel(&model.PANTRYLIST{})

	tableName := _pANTRYLIST.pANTRYLISTDo.TableName()
	_pANTRYLIST.ALL = field.NewAsterisk(tableName)
	_pANTRYLIST.PANTRYID = field.NewInt64(tableName, "PANTRY_ID")
	_pANTRYLIST.PANTRYUNQCD = field.NewString(tableName, "PANTRY_UNQCD")
	_pANTRYLIST.PANTRYCODE = field.NewString(tableName, "PANTRY_CODE")
	_pANTRYLIST.PANTRYNAME = field.NewString(tableName, "PANTRY_NAME")

	_pANTRYLIST.fillFieldMap()

	return _pANTRYLIST
}

type pANTRYLIST struct {
	pANTRYLISTDo

	ALL         field.Asterisk
	PANTRYID    field.Int64
	PANTRYUNQCD field.String
	PANTRYCODE  field.String
	PANTRYNAME  field.String

	fieldMap map[string]field.Expr
}

func (p pANTRYLIST) Table(newTableName string) *pANTRYLIST {
	p.pANTRYLISTDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pANTRYLIST) As(alias string) *pANTRYLIST {
	p.pANTRYLISTDo.DO = *(p.pANTRYLISTDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pANTRYLIST) updateTableName(table string) *pANTRYLIST {
	p.ALL = field.NewAsterisk(table)
	p.PANTRYID = field.NewInt64(table, "PANTRY_ID")
	p.PANTRYUNQCD = field.NewString(table, "PANTRY_UNQCD")
	p.PANTRYCODE = field.NewString(table, "PANTRY_CODE")
	p.PANTRYNAME = field.NewString(table, "PANTRY_NAME")

	p.fillFieldMap()

	return p
}

func (p *pANTRYLIST) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pANTRYLIST) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 4)
	p.fieldMap["PANTRY_ID"] = p.PANTRYID
	p.fieldMap["PANTRY_UNQCD"] = p.PANTRYUNQCD
	p.fieldMap["PANTRY_CODE"] = p.PANTRYCODE
	p.fieldMap["PANTRY_NAME"] = p.PANTRYNAME
}

func (p pANTRYLIST) clone(db *gorm.DB) pANTRYLIST {
	p.pANTRYLISTDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pANTRYLIST) replaceDB(db *gorm.DB) pANTRYLIST {
	p.pANTRYLISTDo.ReplaceDB(db)
	return p
}

type pANTRYLISTDo struct{ gen.DO }

func (p pANTRYLISTDo) Debug() *pANTRYLISTDo {
	return p.withDO(p.DO.Debug())
}

func (p pANTRYLISTDo) WithContext(ctx context.Context) *pANTRYLISTDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pANTRYLISTDo) ReadDB() *pANTRYLISTDo {
	return p.Clauses(dbresolver.Read)
}

func (p pANTRYLISTDo) WriteDB() *pANTRYLISTDo {
	return p.Clauses(dbresolver.Write)
}

func (p pANTRYLISTDo) Session(config *gorm.Session) *pANTRYLISTDo {
	return p.withDO(p.DO.Session(config))
}

func (p pANTRYLISTDo) Clauses(conds ...clause.Expression) *pANTRYLISTDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pANTRYLISTDo) Returning(value interface{}, columns ...string) *pANTRYLISTDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pANTRYLISTDo) Not(conds ...gen.Condition) *pANTRYLISTDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pANTRYLISTDo) Or(conds ...gen.Condition) *pANTRYLISTDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pANTRYLISTDo) Select(conds ...field.Expr) *pANTRYLISTDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pANTRYLISTDo) Where(conds ...gen.Condition) *pANTRYLISTDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pANTRYLISTDo) Order(conds ...field.Expr) *pANTRYLISTDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pANTRYLISTDo) Distinct(cols ...field.Expr) *pANTRYLISTDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pANTRYLISTDo) Omit(cols ...field.Expr) *pANTRYLISTDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pANTRYLISTDo) Join(table schema.Tabler, on ...field.Expr) *pANTRYLISTDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pANTRYLISTDo) LeftJoin(table schema.Tabler, on ...field.Expr) *pANTRYLISTDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pANTRYLISTDo) RightJoin(table schema.Tabler, on ...field.Expr) *pANTRYLISTDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pANTRYLISTDo) Group(cols ...field.Expr) *pANTRYLISTDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pANTRYLISTDo) Having(conds ...gen.Condition) *pANTRYLISTDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pANTRYLISTDo) Limit(limit int) *pANTRYLISTDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pANTRYLISTDo) Offset(offset int) *pANTRYLISTDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pANTRYLISTDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *pANTRYLISTDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pANTRYLISTDo) Unscoped() *pANTRYLISTDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pANTRYLISTDo) Create(values ...*model.PANTRYLIST) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pANTRYLISTDo) CreateInBatches(values []*model.PANTRYLIST, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pANTRYLISTDo) Save(values ...*model.PANTRYLIST) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pANTRYLISTDo) First() (*model.PANTRYLIST, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PANTRYLIST), nil
	}
}

func (p pANTRYLISTDo) Take() (*model.PANTRYLIST, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PANTRYLIST), nil
	}
}

func (p pANTRYLISTDo) Last() (*model.PANTRYLIST, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PANTRYLIST), nil
	}
}

func (p pANTRYLISTDo) Find() ([]*model.PANTRYLIST, error) {
	result, err := p.DO.Find()
	return result.([]*model.PANTRYLIST), err
}

func (p pANTRYLISTDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PANTRYLIST, err error) {
	buf := make([]*model.PANTRYLIST, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pANTRYLISTDo) FindInBatches(result *[]*model.PANTRYLIST, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pANTRYLISTDo) Attrs(attrs ...field.AssignExpr) *pANTRYLISTDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pANTRYLISTDo) Assign(attrs ...field.AssignExpr) *pANTRYLISTDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pANTRYLISTDo) Joins(fields ...field.RelationField) *pANTRYLISTDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pANTRYLISTDo) Preload(fields ...field.RelationField) *pANTRYLISTDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pANTRYLISTDo) FirstOrInit() (*model.PANTRYLIST, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PANTRYLIST), nil
	}
}

func (p pANTRYLISTDo) FirstOrCreate() (*model.PANTRYLIST, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PANTRYLIST), nil
	}
}

func (p pANTRYLISTDo) FindByPage(offset int, limit int) (result []*model.PANTRYLIST, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pANTRYLISTDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pANTRYLISTDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pANTRYLISTDo) Delete(models ...*model.PANTRYLIST) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pANTRYLISTDo) withDO(do gen.Dao) *pANTRYLISTDo {
	p.DO = *do.(*gen.DO)
	return p
}
