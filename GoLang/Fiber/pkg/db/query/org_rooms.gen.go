// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"SMART_OFFICE_APP/pkg/db/model"
)

func newORGROOM(db *gorm.DB, opts ...gen.DOOption) oRGROOM {
	_oRGROOM := oRGROOM{}

	_oRGROOM.oRGROOMDo.UseDB(db, opts...)
	_oRGROOM.oRGROOMDo.UseModel(&model.ORGROOM{})

	tableName := _oRGROOM.oRGROOMDo.TableName()
	_oRGROOM.ALL = field.NewAsterisk(tableName)
	_oRGROOM.ROOMID = field.NewInt64(tableName, "ROOM_ID")
	_oRGROOM.ROOMNUMBER = field.NewInt64(tableName, "ROOM_NUMBER")
	_oRGROOM.ROOMNAME = field.NewString(tableName, "ROOM_NAME")
	_oRGROOM.FLOORSEQ = field.NewInt64(tableName, "FLOOR_SEQ")
	_oRGROOM.ROOMCATSEQ = field.NewInt64(tableName, "ROOM_CAT_SEQ")
	_oRGROOM.ROOMCAPACITY = field.NewInt64(tableName, "ROOM_CAPACITY")
	_oRGROOM.ISACTIVE = field.NewBool(tableName, "IS_ACTIVE")

	_oRGROOM.fillFieldMap()

	return _oRGROOM
}

type oRGROOM struct {
	oRGROOMDo

	ALL          field.Asterisk
	ROOMID       field.Int64
	ROOMNUMBER   field.Int64
	ROOMNAME     field.String
	FLOORSEQ     field.Int64
	ROOMCATSEQ   field.Int64
	ROOMCAPACITY field.Int64
	ISACTIVE     field.Bool

	fieldMap map[string]field.Expr
}

func (o oRGROOM) Table(newTableName string) *oRGROOM {
	o.oRGROOMDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o oRGROOM) As(alias string) *oRGROOM {
	o.oRGROOMDo.DO = *(o.oRGROOMDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *oRGROOM) updateTableName(table string) *oRGROOM {
	o.ALL = field.NewAsterisk(table)
	o.ROOMID = field.NewInt64(table, "ROOM_ID")
	o.ROOMNUMBER = field.NewInt64(table, "ROOM_NUMBER")
	o.ROOMNAME = field.NewString(table, "ROOM_NAME")
	o.FLOORSEQ = field.NewInt64(table, "FLOOR_SEQ")
	o.ROOMCATSEQ = field.NewInt64(table, "ROOM_CAT_SEQ")
	o.ROOMCAPACITY = field.NewInt64(table, "ROOM_CAPACITY")
	o.ISACTIVE = field.NewBool(table, "IS_ACTIVE")

	o.fillFieldMap()

	return o
}

func (o *oRGROOM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *oRGROOM) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 7)
	o.fieldMap["ROOM_ID"] = o.ROOMID
	o.fieldMap["ROOM_NUMBER"] = o.ROOMNUMBER
	o.fieldMap["ROOM_NAME"] = o.ROOMNAME
	o.fieldMap["FLOOR_SEQ"] = o.FLOORSEQ
	o.fieldMap["ROOM_CAT_SEQ"] = o.ROOMCATSEQ
	o.fieldMap["ROOM_CAPACITY"] = o.ROOMCAPACITY
	o.fieldMap["IS_ACTIVE"] = o.ISACTIVE
}

func (o oRGROOM) clone(db *gorm.DB) oRGROOM {
	o.oRGROOMDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o oRGROOM) replaceDB(db *gorm.DB) oRGROOM {
	o.oRGROOMDo.ReplaceDB(db)
	return o
}

type oRGROOMDo struct{ gen.DO }

func (o oRGROOMDo) Debug() *oRGROOMDo {
	return o.withDO(o.DO.Debug())
}

func (o oRGROOMDo) WithContext(ctx context.Context) *oRGROOMDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o oRGROOMDo) ReadDB() *oRGROOMDo {
	return o.Clauses(dbresolver.Read)
}

func (o oRGROOMDo) WriteDB() *oRGROOMDo {
	return o.Clauses(dbresolver.Write)
}

func (o oRGROOMDo) Session(config *gorm.Session) *oRGROOMDo {
	return o.withDO(o.DO.Session(config))
}

func (o oRGROOMDo) Clauses(conds ...clause.Expression) *oRGROOMDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o oRGROOMDo) Returning(value interface{}, columns ...string) *oRGROOMDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o oRGROOMDo) Not(conds ...gen.Condition) *oRGROOMDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o oRGROOMDo) Or(conds ...gen.Condition) *oRGROOMDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o oRGROOMDo) Select(conds ...field.Expr) *oRGROOMDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o oRGROOMDo) Where(conds ...gen.Condition) *oRGROOMDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o oRGROOMDo) Order(conds ...field.Expr) *oRGROOMDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o oRGROOMDo) Distinct(cols ...field.Expr) *oRGROOMDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o oRGROOMDo) Omit(cols ...field.Expr) *oRGROOMDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o oRGROOMDo) Join(table schema.Tabler, on ...field.Expr) *oRGROOMDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o oRGROOMDo) LeftJoin(table schema.Tabler, on ...field.Expr) *oRGROOMDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o oRGROOMDo) RightJoin(table schema.Tabler, on ...field.Expr) *oRGROOMDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o oRGROOMDo) Group(cols ...field.Expr) *oRGROOMDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o oRGROOMDo) Having(conds ...gen.Condition) *oRGROOMDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o oRGROOMDo) Limit(limit int) *oRGROOMDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o oRGROOMDo) Offset(offset int) *oRGROOMDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o oRGROOMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *oRGROOMDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o oRGROOMDo) Unscoped() *oRGROOMDo {
	return o.withDO(o.DO.Unscoped())
}

func (o oRGROOMDo) Create(values ...*model.ORGROOM) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o oRGROOMDo) CreateInBatches(values []*model.ORGROOM, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o oRGROOMDo) Save(values ...*model.ORGROOM) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o oRGROOMDo) First() (*model.ORGROOM, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGROOM), nil
	}
}

func (o oRGROOMDo) Take() (*model.ORGROOM, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGROOM), nil
	}
}

func (o oRGROOMDo) Last() (*model.ORGROOM, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGROOM), nil
	}
}

func (o oRGROOMDo) Find() ([]*model.ORGROOM, error) {
	result, err := o.DO.Find()
	return result.([]*model.ORGROOM), err
}

func (o oRGROOMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ORGROOM, err error) {
	buf := make([]*model.ORGROOM, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o oRGROOMDo) FindInBatches(result *[]*model.ORGROOM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o oRGROOMDo) Attrs(attrs ...field.AssignExpr) *oRGROOMDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o oRGROOMDo) Assign(attrs ...field.AssignExpr) *oRGROOMDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o oRGROOMDo) Joins(fields ...field.RelationField) *oRGROOMDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o oRGROOMDo) Preload(fields ...field.RelationField) *oRGROOMDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o oRGROOMDo) FirstOrInit() (*model.ORGROOM, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGROOM), nil
	}
}

func (o oRGROOMDo) FirstOrCreate() (*model.ORGROOM, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGROOM), nil
	}
}

func (o oRGROOMDo) FindByPage(offset int, limit int) (result []*model.ORGROOM, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o oRGROOMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o oRGROOMDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o oRGROOMDo) Delete(models ...*model.ORGROOM) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *oRGROOMDo) withDO(do gen.Dao) *oRGROOMDo {
	o.DO = *do.(*gen.DO)
	return o
}
