// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"SMART_OFFICE_APP/pkg/db/model"
)

func newPANTRYORDER(db *gorm.DB, opts ...gen.DOOption) pANTRYORDER {
	_pANTRYORDER := pANTRYORDER{}

	_pANTRYORDER.pANTRYORDERDo.UseDB(db, opts...)
	_pANTRYORDER.pANTRYORDERDo.UseModel(&model.PANTRYORDER{})

	tableName := _pANTRYORDER.pANTRYORDERDo.TableName()
	_pANTRYORDER.ALL = field.NewAsterisk(tableName)
	_pANTRYORDER.ORDERID = field.NewString(tableName, "ORDER_ID")
	_pANTRYORDER.BOOKINGID = field.NewString(tableName, "BOOKING_ID")
	_pANTRYORDER.PANTRYID = field.NewInt64(tableName, "PANTRY_ID")
	_pANTRYORDER.PANTRYCODE = field.NewString(tableName, "PANTRY_CODE")
	_pANTRYORDER.ROOMID = field.NewInt64(tableName, "ROOM_ID")
	_pANTRYORDER.HOSTID = field.NewString(tableName, "HOST_ID")
	_pANTRYORDER.HOSTNAME = field.NewString(tableName, "HOST_NAME")
	_pANTRYORDER.ORDERDATETIME = field.NewString(tableName, "ORDER_DATETIME")
	_pANTRYORDER.STATUS = field.NewInt64(tableName, "STATUS")
	_pANTRYORDER.ORDERCONFIRMAT = field.NewString(tableName, "ORDER_CONFIRM_AT")
	_pANTRYORDER.ORDERDELIVERAT = field.NewString(tableName, "ORDER_DELIVER_AT")
	_pANTRYORDER.ORDERCANCELAT = field.NewString(tableName, "ORDER_CANCEL_AT")
	_pANTRYORDER.PROCESSEDBY = field.NewString(tableName, "PROCESSED_BY")

	_pANTRYORDER.fillFieldMap()

	return _pANTRYORDER
}

type pANTRYORDER struct {
	pANTRYORDERDo

	ALL            field.Asterisk
	ORDERID        field.String
	BOOKINGID      field.String
	PANTRYID       field.Int64
	PANTRYCODE     field.String
	ROOMID         field.Int64
	HOSTID         field.String
	HOSTNAME       field.String
	ORDERDATETIME  field.String
	STATUS         field.Int64
	ORDERCONFIRMAT field.String
	ORDERDELIVERAT field.String
	ORDERCANCELAT  field.String
	PROCESSEDBY    field.String

	fieldMap map[string]field.Expr
}

func (p pANTRYORDER) Table(newTableName string) *pANTRYORDER {
	p.pANTRYORDERDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pANTRYORDER) As(alias string) *pANTRYORDER {
	p.pANTRYORDERDo.DO = *(p.pANTRYORDERDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pANTRYORDER) updateTableName(table string) *pANTRYORDER {
	p.ALL = field.NewAsterisk(table)
	p.ORDERID = field.NewString(table, "ORDER_ID")
	p.BOOKINGID = field.NewString(table, "BOOKING_ID")
	p.PANTRYID = field.NewInt64(table, "PANTRY_ID")
	p.PANTRYCODE = field.NewString(table, "PANTRY_CODE")
	p.ROOMID = field.NewInt64(table, "ROOM_ID")
	p.HOSTID = field.NewString(table, "HOST_ID")
	p.HOSTNAME = field.NewString(table, "HOST_NAME")
	p.ORDERDATETIME = field.NewString(table, "ORDER_DATETIME")
	p.STATUS = field.NewInt64(table, "STATUS")
	p.ORDERCONFIRMAT = field.NewString(table, "ORDER_CONFIRM_AT")
	p.ORDERDELIVERAT = field.NewString(table, "ORDER_DELIVER_AT")
	p.ORDERCANCELAT = field.NewString(table, "ORDER_CANCEL_AT")
	p.PROCESSEDBY = field.NewString(table, "PROCESSED_BY")

	p.fillFieldMap()

	return p
}

func (p *pANTRYORDER) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pANTRYORDER) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 13)
	p.fieldMap["ORDER_ID"] = p.ORDERID
	p.fieldMap["BOOKING_ID"] = p.BOOKINGID
	p.fieldMap["PANTRY_ID"] = p.PANTRYID
	p.fieldMap["PANTRY_CODE"] = p.PANTRYCODE
	p.fieldMap["ROOM_ID"] = p.ROOMID
	p.fieldMap["HOST_ID"] = p.HOSTID
	p.fieldMap["HOST_NAME"] = p.HOSTNAME
	p.fieldMap["ORDER_DATETIME"] = p.ORDERDATETIME
	p.fieldMap["STATUS"] = p.STATUS
	p.fieldMap["ORDER_CONFIRM_AT"] = p.ORDERCONFIRMAT
	p.fieldMap["ORDER_DELIVER_AT"] = p.ORDERDELIVERAT
	p.fieldMap["ORDER_CANCEL_AT"] = p.ORDERCANCELAT
	p.fieldMap["PROCESSED_BY"] = p.PROCESSEDBY
}

func (p pANTRYORDER) clone(db *gorm.DB) pANTRYORDER {
	p.pANTRYORDERDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pANTRYORDER) replaceDB(db *gorm.DB) pANTRYORDER {
	p.pANTRYORDERDo.ReplaceDB(db)
	return p
}

type pANTRYORDERDo struct{ gen.DO }

func (p pANTRYORDERDo) Debug() *pANTRYORDERDo {
	return p.withDO(p.DO.Debug())
}

func (p pANTRYORDERDo) WithContext(ctx context.Context) *pANTRYORDERDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pANTRYORDERDo) ReadDB() *pANTRYORDERDo {
	return p.Clauses(dbresolver.Read)
}

func (p pANTRYORDERDo) WriteDB() *pANTRYORDERDo {
	return p.Clauses(dbresolver.Write)
}

func (p pANTRYORDERDo) Session(config *gorm.Session) *pANTRYORDERDo {
	return p.withDO(p.DO.Session(config))
}

func (p pANTRYORDERDo) Clauses(conds ...clause.Expression) *pANTRYORDERDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pANTRYORDERDo) Returning(value interface{}, columns ...string) *pANTRYORDERDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pANTRYORDERDo) Not(conds ...gen.Condition) *pANTRYORDERDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pANTRYORDERDo) Or(conds ...gen.Condition) *pANTRYORDERDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pANTRYORDERDo) Select(conds ...field.Expr) *pANTRYORDERDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pANTRYORDERDo) Where(conds ...gen.Condition) *pANTRYORDERDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pANTRYORDERDo) Order(conds ...field.Expr) *pANTRYORDERDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pANTRYORDERDo) Distinct(cols ...field.Expr) *pANTRYORDERDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pANTRYORDERDo) Omit(cols ...field.Expr) *pANTRYORDERDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pANTRYORDERDo) Join(table schema.Tabler, on ...field.Expr) *pANTRYORDERDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pANTRYORDERDo) LeftJoin(table schema.Tabler, on ...field.Expr) *pANTRYORDERDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pANTRYORDERDo) RightJoin(table schema.Tabler, on ...field.Expr) *pANTRYORDERDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pANTRYORDERDo) Group(cols ...field.Expr) *pANTRYORDERDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pANTRYORDERDo) Having(conds ...gen.Condition) *pANTRYORDERDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pANTRYORDERDo) Limit(limit int) *pANTRYORDERDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pANTRYORDERDo) Offset(offset int) *pANTRYORDERDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pANTRYORDERDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *pANTRYORDERDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pANTRYORDERDo) Unscoped() *pANTRYORDERDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pANTRYORDERDo) Create(values ...*model.PANTRYORDER) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pANTRYORDERDo) CreateInBatches(values []*model.PANTRYORDER, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pANTRYORDERDo) Save(values ...*model.PANTRYORDER) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pANTRYORDERDo) First() (*model.PANTRYORDER, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PANTRYORDER), nil
	}
}

func (p pANTRYORDERDo) Take() (*model.PANTRYORDER, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PANTRYORDER), nil
	}
}

func (p pANTRYORDERDo) Last() (*model.PANTRYORDER, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PANTRYORDER), nil
	}
}

func (p pANTRYORDERDo) Find() ([]*model.PANTRYORDER, error) {
	result, err := p.DO.Find()
	return result.([]*model.PANTRYORDER), err
}

func (p pANTRYORDERDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PANTRYORDER, err error) {
	buf := make([]*model.PANTRYORDER, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pANTRYORDERDo) FindInBatches(result *[]*model.PANTRYORDER, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pANTRYORDERDo) Attrs(attrs ...field.AssignExpr) *pANTRYORDERDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pANTRYORDERDo) Assign(attrs ...field.AssignExpr) *pANTRYORDERDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pANTRYORDERDo) Joins(fields ...field.RelationField) *pANTRYORDERDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pANTRYORDERDo) Preload(fields ...field.RelationField) *pANTRYORDERDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pANTRYORDERDo) FirstOrInit() (*model.PANTRYORDER, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PANTRYORDER), nil
	}
}

func (p pANTRYORDERDo) FirstOrCreate() (*model.PANTRYORDER, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PANTRYORDER), nil
	}
}

func (p pANTRYORDERDo) FindByPage(offset int, limit int) (result []*model.PANTRYORDER, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pANTRYORDERDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pANTRYORDERDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pANTRYORDERDo) Delete(models ...*model.PANTRYORDER) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pANTRYORDERDo) withDO(do gen.Dao) *pANTRYORDERDo {
	p.DO = *do.(*gen.DO)
	return p
}
