// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"SMART_OFFICE_APP/pkg/db/model"
)

func newCOMMUNICATIONWEBPUSH(db *gorm.DB, opts ...gen.DOOption) cOMMUNICATIONWEBPUSH {
	_cOMMUNICATIONWEBPUSH := cOMMUNICATIONWEBPUSH{}

	_cOMMUNICATIONWEBPUSH.cOMMUNICATIONWEBPUSHDo.UseDB(db, opts...)
	_cOMMUNICATIONWEBPUSH.cOMMUNICATIONWEBPUSHDo.UseModel(&model.COMMUNICATIONWEBPUSH{})

	tableName := _cOMMUNICATIONWEBPUSH.cOMMUNICATIONWEBPUSHDo.TableName()
	_cOMMUNICATIONWEBPUSH.ALL = field.NewAsterisk(tableName)
	_cOMMUNICATIONWEBPUSH.SEQID = field.NewInt64(tableName, "SEQ_ID")
	_cOMMUNICATIONWEBPUSH.MESSAGEID = field.NewString(tableName, "MESSAGE_ID")
	_cOMMUNICATIONWEBPUSH.PUSHDATETIME = field.NewString(tableName, "PUSH_DATE_TIME")
	_cOMMUNICATIONWEBPUSH.USERID = field.NewString(tableName, "USER_ID")
	_cOMMUNICATIONWEBPUSH.MESSAGETYPE = field.NewString(tableName, "MESSAGE_TYPE")
	_cOMMUNICATIONWEBPUSH.MESSAGETITLEEN = field.NewString(tableName, "MESSAGE_TITLE_EN")
	_cOMMUNICATIONWEBPUSH.MESSAGEBODYEN = field.NewString(tableName, "MESSAGE_BODY_EN")
	_cOMMUNICATIONWEBPUSH.MESSAGETITLEKO = field.NewString(tableName, "MESSAGE_TITLE_KO")
	_cOMMUNICATIONWEBPUSH.MESSAGEBODYKO = field.NewString(tableName, "MESSAGE_BODY_KO")
	_cOMMUNICATIONWEBPUSH.SENTSTATUS = field.NewBool(tableName, "SENT_STATUS")
	_cOMMUNICATIONWEBPUSH.SENTDATETIME = field.NewString(tableName, "SENT_DATE_TIME")

	_cOMMUNICATIONWEBPUSH.fillFieldMap()

	return _cOMMUNICATIONWEBPUSH
}

type cOMMUNICATIONWEBPUSH struct {
	cOMMUNICATIONWEBPUSHDo

	ALL            field.Asterisk
	SEQID          field.Int64
	MESSAGEID      field.String
	PUSHDATETIME   field.String
	USERID         field.String
	MESSAGETYPE    field.String
	MESSAGETITLEEN field.String
	MESSAGEBODYEN  field.String
	MESSAGETITLEKO field.String
	MESSAGEBODYKO  field.String
	SENTSTATUS     field.Bool
	SENTDATETIME   field.String

	fieldMap map[string]field.Expr
}

func (c cOMMUNICATIONWEBPUSH) Table(newTableName string) *cOMMUNICATIONWEBPUSH {
	c.cOMMUNICATIONWEBPUSHDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cOMMUNICATIONWEBPUSH) As(alias string) *cOMMUNICATIONWEBPUSH {
	c.cOMMUNICATIONWEBPUSHDo.DO = *(c.cOMMUNICATIONWEBPUSHDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cOMMUNICATIONWEBPUSH) updateTableName(table string) *cOMMUNICATIONWEBPUSH {
	c.ALL = field.NewAsterisk(table)
	c.SEQID = field.NewInt64(table, "SEQ_ID")
	c.MESSAGEID = field.NewString(table, "MESSAGE_ID")
	c.PUSHDATETIME = field.NewString(table, "PUSH_DATE_TIME")
	c.USERID = field.NewString(table, "USER_ID")
	c.MESSAGETYPE = field.NewString(table, "MESSAGE_TYPE")
	c.MESSAGETITLEEN = field.NewString(table, "MESSAGE_TITLE_EN")
	c.MESSAGEBODYEN = field.NewString(table, "MESSAGE_BODY_EN")
	c.MESSAGETITLEKO = field.NewString(table, "MESSAGE_TITLE_KO")
	c.MESSAGEBODYKO = field.NewString(table, "MESSAGE_BODY_KO")
	c.SENTSTATUS = field.NewBool(table, "SENT_STATUS")
	c.SENTDATETIME = field.NewString(table, "SENT_DATE_TIME")

	c.fillFieldMap()

	return c
}

func (c *cOMMUNICATIONWEBPUSH) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cOMMUNICATIONWEBPUSH) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 11)
	c.fieldMap["SEQ_ID"] = c.SEQID
	c.fieldMap["MESSAGE_ID"] = c.MESSAGEID
	c.fieldMap["PUSH_DATE_TIME"] = c.PUSHDATETIME
	c.fieldMap["USER_ID"] = c.USERID
	c.fieldMap["MESSAGE_TYPE"] = c.MESSAGETYPE
	c.fieldMap["MESSAGE_TITLE_EN"] = c.MESSAGETITLEEN
	c.fieldMap["MESSAGE_BODY_EN"] = c.MESSAGEBODYEN
	c.fieldMap["MESSAGE_TITLE_KO"] = c.MESSAGETITLEKO
	c.fieldMap["MESSAGE_BODY_KO"] = c.MESSAGEBODYKO
	c.fieldMap["SENT_STATUS"] = c.SENTSTATUS
	c.fieldMap["SENT_DATE_TIME"] = c.SENTDATETIME
}

func (c cOMMUNICATIONWEBPUSH) clone(db *gorm.DB) cOMMUNICATIONWEBPUSH {
	c.cOMMUNICATIONWEBPUSHDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cOMMUNICATIONWEBPUSH) replaceDB(db *gorm.DB) cOMMUNICATIONWEBPUSH {
	c.cOMMUNICATIONWEBPUSHDo.ReplaceDB(db)
	return c
}

type cOMMUNICATIONWEBPUSHDo struct{ gen.DO }

func (c cOMMUNICATIONWEBPUSHDo) Debug() *cOMMUNICATIONWEBPUSHDo {
	return c.withDO(c.DO.Debug())
}

func (c cOMMUNICATIONWEBPUSHDo) WithContext(ctx context.Context) *cOMMUNICATIONWEBPUSHDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cOMMUNICATIONWEBPUSHDo) ReadDB() *cOMMUNICATIONWEBPUSHDo {
	return c.Clauses(dbresolver.Read)
}

func (c cOMMUNICATIONWEBPUSHDo) WriteDB() *cOMMUNICATIONWEBPUSHDo {
	return c.Clauses(dbresolver.Write)
}

func (c cOMMUNICATIONWEBPUSHDo) Session(config *gorm.Session) *cOMMUNICATIONWEBPUSHDo {
	return c.withDO(c.DO.Session(config))
}

func (c cOMMUNICATIONWEBPUSHDo) Clauses(conds ...clause.Expression) *cOMMUNICATIONWEBPUSHDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cOMMUNICATIONWEBPUSHDo) Returning(value interface{}, columns ...string) *cOMMUNICATIONWEBPUSHDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cOMMUNICATIONWEBPUSHDo) Not(conds ...gen.Condition) *cOMMUNICATIONWEBPUSHDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cOMMUNICATIONWEBPUSHDo) Or(conds ...gen.Condition) *cOMMUNICATIONWEBPUSHDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cOMMUNICATIONWEBPUSHDo) Select(conds ...field.Expr) *cOMMUNICATIONWEBPUSHDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cOMMUNICATIONWEBPUSHDo) Where(conds ...gen.Condition) *cOMMUNICATIONWEBPUSHDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cOMMUNICATIONWEBPUSHDo) Order(conds ...field.Expr) *cOMMUNICATIONWEBPUSHDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cOMMUNICATIONWEBPUSHDo) Distinct(cols ...field.Expr) *cOMMUNICATIONWEBPUSHDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cOMMUNICATIONWEBPUSHDo) Omit(cols ...field.Expr) *cOMMUNICATIONWEBPUSHDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cOMMUNICATIONWEBPUSHDo) Join(table schema.Tabler, on ...field.Expr) *cOMMUNICATIONWEBPUSHDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cOMMUNICATIONWEBPUSHDo) LeftJoin(table schema.Tabler, on ...field.Expr) *cOMMUNICATIONWEBPUSHDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cOMMUNICATIONWEBPUSHDo) RightJoin(table schema.Tabler, on ...field.Expr) *cOMMUNICATIONWEBPUSHDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cOMMUNICATIONWEBPUSHDo) Group(cols ...field.Expr) *cOMMUNICATIONWEBPUSHDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cOMMUNICATIONWEBPUSHDo) Having(conds ...gen.Condition) *cOMMUNICATIONWEBPUSHDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cOMMUNICATIONWEBPUSHDo) Limit(limit int) *cOMMUNICATIONWEBPUSHDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cOMMUNICATIONWEBPUSHDo) Offset(offset int) *cOMMUNICATIONWEBPUSHDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cOMMUNICATIONWEBPUSHDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *cOMMUNICATIONWEBPUSHDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cOMMUNICATIONWEBPUSHDo) Unscoped() *cOMMUNICATIONWEBPUSHDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cOMMUNICATIONWEBPUSHDo) Create(values ...*model.COMMUNICATIONWEBPUSH) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cOMMUNICATIONWEBPUSHDo) CreateInBatches(values []*model.COMMUNICATIONWEBPUSH, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cOMMUNICATIONWEBPUSHDo) Save(values ...*model.COMMUNICATIONWEBPUSH) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cOMMUNICATIONWEBPUSHDo) First() (*model.COMMUNICATIONWEBPUSH, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.COMMUNICATIONWEBPUSH), nil
	}
}

func (c cOMMUNICATIONWEBPUSHDo) Take() (*model.COMMUNICATIONWEBPUSH, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.COMMUNICATIONWEBPUSH), nil
	}
}

func (c cOMMUNICATIONWEBPUSHDo) Last() (*model.COMMUNICATIONWEBPUSH, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.COMMUNICATIONWEBPUSH), nil
	}
}

func (c cOMMUNICATIONWEBPUSHDo) Find() ([]*model.COMMUNICATIONWEBPUSH, error) {
	result, err := c.DO.Find()
	return result.([]*model.COMMUNICATIONWEBPUSH), err
}

func (c cOMMUNICATIONWEBPUSHDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.COMMUNICATIONWEBPUSH, err error) {
	buf := make([]*model.COMMUNICATIONWEBPUSH, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cOMMUNICATIONWEBPUSHDo) FindInBatches(result *[]*model.COMMUNICATIONWEBPUSH, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cOMMUNICATIONWEBPUSHDo) Attrs(attrs ...field.AssignExpr) *cOMMUNICATIONWEBPUSHDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cOMMUNICATIONWEBPUSHDo) Assign(attrs ...field.AssignExpr) *cOMMUNICATIONWEBPUSHDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cOMMUNICATIONWEBPUSHDo) Joins(fields ...field.RelationField) *cOMMUNICATIONWEBPUSHDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cOMMUNICATIONWEBPUSHDo) Preload(fields ...field.RelationField) *cOMMUNICATIONWEBPUSHDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cOMMUNICATIONWEBPUSHDo) FirstOrInit() (*model.COMMUNICATIONWEBPUSH, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.COMMUNICATIONWEBPUSH), nil
	}
}

func (c cOMMUNICATIONWEBPUSHDo) FirstOrCreate() (*model.COMMUNICATIONWEBPUSH, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.COMMUNICATIONWEBPUSH), nil
	}
}

func (c cOMMUNICATIONWEBPUSHDo) FindByPage(offset int, limit int) (result []*model.COMMUNICATIONWEBPUSH, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cOMMUNICATIONWEBPUSHDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cOMMUNICATIONWEBPUSHDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cOMMUNICATIONWEBPUSHDo) Delete(models ...*model.COMMUNICATIONWEBPUSH) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cOMMUNICATIONWEBPUSHDo) withDO(do gen.Dao) *cOMMUNICATIONWEBPUSHDo {
	c.DO = *do.(*gen.DO)
	return c
}
