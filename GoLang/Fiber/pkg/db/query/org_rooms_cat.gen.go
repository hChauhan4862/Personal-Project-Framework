// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"SMART_OFFICE_APP/pkg/db/model"
)

func newORGROOMSCAT(db *gorm.DB, opts ...gen.DOOption) oRGROOMSCAT {
	_oRGROOMSCAT := oRGROOMSCAT{}

	_oRGROOMSCAT.oRGROOMSCATDo.UseDB(db, opts...)
	_oRGROOMSCAT.oRGROOMSCATDo.UseModel(&model.ORGROOMSCAT{})

	tableName := _oRGROOMSCAT.oRGROOMSCATDo.TableName()
	_oRGROOMSCAT.ALL = field.NewAsterisk(tableName)
	_oRGROOMSCAT.ROOMCATSEQ = field.NewInt64(tableName, "ROOM_CAT_SEQ")
	_oRGROOMSCAT.ROOMCATNAME = field.NewString(tableName, "ROOM_CAT_NAME")
	_oRGROOMSCAT.ROOMCATCAPACITY = field.NewInt64(tableName, "ROOM_CAT_CAPACITY")

	_oRGROOMSCAT.fillFieldMap()

	return _oRGROOMSCAT
}

type oRGROOMSCAT struct {
	oRGROOMSCATDo

	ALL             field.Asterisk
	ROOMCATSEQ      field.Int64
	ROOMCATNAME     field.String
	ROOMCATCAPACITY field.Int64

	fieldMap map[string]field.Expr
}

func (o oRGROOMSCAT) Table(newTableName string) *oRGROOMSCAT {
	o.oRGROOMSCATDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o oRGROOMSCAT) As(alias string) *oRGROOMSCAT {
	o.oRGROOMSCATDo.DO = *(o.oRGROOMSCATDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *oRGROOMSCAT) updateTableName(table string) *oRGROOMSCAT {
	o.ALL = field.NewAsterisk(table)
	o.ROOMCATSEQ = field.NewInt64(table, "ROOM_CAT_SEQ")
	o.ROOMCATNAME = field.NewString(table, "ROOM_CAT_NAME")
	o.ROOMCATCAPACITY = field.NewInt64(table, "ROOM_CAT_CAPACITY")

	o.fillFieldMap()

	return o
}

func (o *oRGROOMSCAT) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *oRGROOMSCAT) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 3)
	o.fieldMap["ROOM_CAT_SEQ"] = o.ROOMCATSEQ
	o.fieldMap["ROOM_CAT_NAME"] = o.ROOMCATNAME
	o.fieldMap["ROOM_CAT_CAPACITY"] = o.ROOMCATCAPACITY
}

func (o oRGROOMSCAT) clone(db *gorm.DB) oRGROOMSCAT {
	o.oRGROOMSCATDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o oRGROOMSCAT) replaceDB(db *gorm.DB) oRGROOMSCAT {
	o.oRGROOMSCATDo.ReplaceDB(db)
	return o
}

type oRGROOMSCATDo struct{ gen.DO }

func (o oRGROOMSCATDo) Debug() *oRGROOMSCATDo {
	return o.withDO(o.DO.Debug())
}

func (o oRGROOMSCATDo) WithContext(ctx context.Context) *oRGROOMSCATDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o oRGROOMSCATDo) ReadDB() *oRGROOMSCATDo {
	return o.Clauses(dbresolver.Read)
}

func (o oRGROOMSCATDo) WriteDB() *oRGROOMSCATDo {
	return o.Clauses(dbresolver.Write)
}

func (o oRGROOMSCATDo) Session(config *gorm.Session) *oRGROOMSCATDo {
	return o.withDO(o.DO.Session(config))
}

func (o oRGROOMSCATDo) Clauses(conds ...clause.Expression) *oRGROOMSCATDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o oRGROOMSCATDo) Returning(value interface{}, columns ...string) *oRGROOMSCATDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o oRGROOMSCATDo) Not(conds ...gen.Condition) *oRGROOMSCATDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o oRGROOMSCATDo) Or(conds ...gen.Condition) *oRGROOMSCATDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o oRGROOMSCATDo) Select(conds ...field.Expr) *oRGROOMSCATDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o oRGROOMSCATDo) Where(conds ...gen.Condition) *oRGROOMSCATDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o oRGROOMSCATDo) Order(conds ...field.Expr) *oRGROOMSCATDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o oRGROOMSCATDo) Distinct(cols ...field.Expr) *oRGROOMSCATDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o oRGROOMSCATDo) Omit(cols ...field.Expr) *oRGROOMSCATDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o oRGROOMSCATDo) Join(table schema.Tabler, on ...field.Expr) *oRGROOMSCATDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o oRGROOMSCATDo) LeftJoin(table schema.Tabler, on ...field.Expr) *oRGROOMSCATDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o oRGROOMSCATDo) RightJoin(table schema.Tabler, on ...field.Expr) *oRGROOMSCATDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o oRGROOMSCATDo) Group(cols ...field.Expr) *oRGROOMSCATDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o oRGROOMSCATDo) Having(conds ...gen.Condition) *oRGROOMSCATDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o oRGROOMSCATDo) Limit(limit int) *oRGROOMSCATDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o oRGROOMSCATDo) Offset(offset int) *oRGROOMSCATDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o oRGROOMSCATDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *oRGROOMSCATDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o oRGROOMSCATDo) Unscoped() *oRGROOMSCATDo {
	return o.withDO(o.DO.Unscoped())
}

func (o oRGROOMSCATDo) Create(values ...*model.ORGROOMSCAT) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o oRGROOMSCATDo) CreateInBatches(values []*model.ORGROOMSCAT, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o oRGROOMSCATDo) Save(values ...*model.ORGROOMSCAT) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o oRGROOMSCATDo) First() (*model.ORGROOMSCAT, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGROOMSCAT), nil
	}
}

func (o oRGROOMSCATDo) Take() (*model.ORGROOMSCAT, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGROOMSCAT), nil
	}
}

func (o oRGROOMSCATDo) Last() (*model.ORGROOMSCAT, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGROOMSCAT), nil
	}
}

func (o oRGROOMSCATDo) Find() ([]*model.ORGROOMSCAT, error) {
	result, err := o.DO.Find()
	return result.([]*model.ORGROOMSCAT), err
}

func (o oRGROOMSCATDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ORGROOMSCAT, err error) {
	buf := make([]*model.ORGROOMSCAT, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o oRGROOMSCATDo) FindInBatches(result *[]*model.ORGROOMSCAT, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o oRGROOMSCATDo) Attrs(attrs ...field.AssignExpr) *oRGROOMSCATDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o oRGROOMSCATDo) Assign(attrs ...field.AssignExpr) *oRGROOMSCATDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o oRGROOMSCATDo) Joins(fields ...field.RelationField) *oRGROOMSCATDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o oRGROOMSCATDo) Preload(fields ...field.RelationField) *oRGROOMSCATDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o oRGROOMSCATDo) FirstOrInit() (*model.ORGROOMSCAT, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGROOMSCAT), nil
	}
}

func (o oRGROOMSCATDo) FirstOrCreate() (*model.ORGROOMSCAT, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGROOMSCAT), nil
	}
}

func (o oRGROOMSCATDo) FindByPage(offset int, limit int) (result []*model.ORGROOMSCAT, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o oRGROOMSCATDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o oRGROOMSCATDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o oRGROOMSCATDo) Delete(models ...*model.ORGROOMSCAT) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *oRGROOMSCATDo) withDO(do gen.Dao) *oRGROOMSCATDo {
	o.DO = *do.(*gen.DO)
	return o
}
