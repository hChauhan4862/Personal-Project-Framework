// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"SMART_OFFICE_APP/pkg/db/model"
)

func newAPPPLATFORMCAT(db *gorm.DB, opts ...gen.DOOption) aPPPLATFORMCAT {
	_aPPPLATFORMCAT := aPPPLATFORMCAT{}

	_aPPPLATFORMCAT.aPPPLATFORMCATDo.UseDB(db, opts...)
	_aPPPLATFORMCAT.aPPPLATFORMCATDo.UseModel(&model.APPPLATFORMCAT{})

	tableName := _aPPPLATFORMCAT.aPPPLATFORMCATDo.TableName()
	_aPPPLATFORMCAT.ALL = field.NewAsterisk(tableName)
	_aPPPLATFORMCAT.PLATFORMID = field.NewInt64(tableName, "PLATFORM_ID")
	_aPPPLATFORMCAT.PLATFORMNAME = field.NewString(tableName, "PLATFORM_NAME")

	_aPPPLATFORMCAT.fillFieldMap()

	return _aPPPLATFORMCAT
}

type aPPPLATFORMCAT struct {
	aPPPLATFORMCATDo

	ALL          field.Asterisk
	PLATFORMID   field.Int64
	PLATFORMNAME field.String

	fieldMap map[string]field.Expr
}

func (a aPPPLATFORMCAT) Table(newTableName string) *aPPPLATFORMCAT {
	a.aPPPLATFORMCATDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aPPPLATFORMCAT) As(alias string) *aPPPLATFORMCAT {
	a.aPPPLATFORMCATDo.DO = *(a.aPPPLATFORMCATDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aPPPLATFORMCAT) updateTableName(table string) *aPPPLATFORMCAT {
	a.ALL = field.NewAsterisk(table)
	a.PLATFORMID = field.NewInt64(table, "PLATFORM_ID")
	a.PLATFORMNAME = field.NewString(table, "PLATFORM_NAME")

	a.fillFieldMap()

	return a
}

func (a *aPPPLATFORMCAT) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aPPPLATFORMCAT) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 2)
	a.fieldMap["PLATFORM_ID"] = a.PLATFORMID
	a.fieldMap["PLATFORM_NAME"] = a.PLATFORMNAME
}

func (a aPPPLATFORMCAT) clone(db *gorm.DB) aPPPLATFORMCAT {
	a.aPPPLATFORMCATDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aPPPLATFORMCAT) replaceDB(db *gorm.DB) aPPPLATFORMCAT {
	a.aPPPLATFORMCATDo.ReplaceDB(db)
	return a
}

type aPPPLATFORMCATDo struct{ gen.DO }

func (a aPPPLATFORMCATDo) Debug() *aPPPLATFORMCATDo {
	return a.withDO(a.DO.Debug())
}

func (a aPPPLATFORMCATDo) WithContext(ctx context.Context) *aPPPLATFORMCATDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aPPPLATFORMCATDo) ReadDB() *aPPPLATFORMCATDo {
	return a.Clauses(dbresolver.Read)
}

func (a aPPPLATFORMCATDo) WriteDB() *aPPPLATFORMCATDo {
	return a.Clauses(dbresolver.Write)
}

func (a aPPPLATFORMCATDo) Session(config *gorm.Session) *aPPPLATFORMCATDo {
	return a.withDO(a.DO.Session(config))
}

func (a aPPPLATFORMCATDo) Clauses(conds ...clause.Expression) *aPPPLATFORMCATDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aPPPLATFORMCATDo) Returning(value interface{}, columns ...string) *aPPPLATFORMCATDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aPPPLATFORMCATDo) Not(conds ...gen.Condition) *aPPPLATFORMCATDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aPPPLATFORMCATDo) Or(conds ...gen.Condition) *aPPPLATFORMCATDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aPPPLATFORMCATDo) Select(conds ...field.Expr) *aPPPLATFORMCATDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aPPPLATFORMCATDo) Where(conds ...gen.Condition) *aPPPLATFORMCATDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aPPPLATFORMCATDo) Order(conds ...field.Expr) *aPPPLATFORMCATDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aPPPLATFORMCATDo) Distinct(cols ...field.Expr) *aPPPLATFORMCATDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aPPPLATFORMCATDo) Omit(cols ...field.Expr) *aPPPLATFORMCATDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aPPPLATFORMCATDo) Join(table schema.Tabler, on ...field.Expr) *aPPPLATFORMCATDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aPPPLATFORMCATDo) LeftJoin(table schema.Tabler, on ...field.Expr) *aPPPLATFORMCATDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aPPPLATFORMCATDo) RightJoin(table schema.Tabler, on ...field.Expr) *aPPPLATFORMCATDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aPPPLATFORMCATDo) Group(cols ...field.Expr) *aPPPLATFORMCATDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aPPPLATFORMCATDo) Having(conds ...gen.Condition) *aPPPLATFORMCATDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aPPPLATFORMCATDo) Limit(limit int) *aPPPLATFORMCATDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aPPPLATFORMCATDo) Offset(offset int) *aPPPLATFORMCATDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aPPPLATFORMCATDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *aPPPLATFORMCATDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aPPPLATFORMCATDo) Unscoped() *aPPPLATFORMCATDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aPPPLATFORMCATDo) Create(values ...*model.APPPLATFORMCAT) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aPPPLATFORMCATDo) CreateInBatches(values []*model.APPPLATFORMCAT, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aPPPLATFORMCATDo) Save(values ...*model.APPPLATFORMCAT) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aPPPLATFORMCATDo) First() (*model.APPPLATFORMCAT, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPPLATFORMCAT), nil
	}
}

func (a aPPPLATFORMCATDo) Take() (*model.APPPLATFORMCAT, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPPLATFORMCAT), nil
	}
}

func (a aPPPLATFORMCATDo) Last() (*model.APPPLATFORMCAT, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPPLATFORMCAT), nil
	}
}

func (a aPPPLATFORMCATDo) Find() ([]*model.APPPLATFORMCAT, error) {
	result, err := a.DO.Find()
	return result.([]*model.APPPLATFORMCAT), err
}

func (a aPPPLATFORMCATDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APPPLATFORMCAT, err error) {
	buf := make([]*model.APPPLATFORMCAT, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aPPPLATFORMCATDo) FindInBatches(result *[]*model.APPPLATFORMCAT, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aPPPLATFORMCATDo) Attrs(attrs ...field.AssignExpr) *aPPPLATFORMCATDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aPPPLATFORMCATDo) Assign(attrs ...field.AssignExpr) *aPPPLATFORMCATDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aPPPLATFORMCATDo) Joins(fields ...field.RelationField) *aPPPLATFORMCATDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aPPPLATFORMCATDo) Preload(fields ...field.RelationField) *aPPPLATFORMCATDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aPPPLATFORMCATDo) FirstOrInit() (*model.APPPLATFORMCAT, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPPLATFORMCAT), nil
	}
}

func (a aPPPLATFORMCATDo) FirstOrCreate() (*model.APPPLATFORMCAT, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPPLATFORMCAT), nil
	}
}

func (a aPPPLATFORMCATDo) FindByPage(offset int, limit int) (result []*model.APPPLATFORMCAT, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aPPPLATFORMCATDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aPPPLATFORMCATDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aPPPLATFORMCATDo) Delete(models ...*model.APPPLATFORMCAT) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aPPPLATFORMCATDo) withDO(do gen.Dao) *aPPPLATFORMCATDo {
	a.DO = *do.(*gen.DO)
	return a
}
