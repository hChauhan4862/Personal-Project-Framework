// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"SMART_OFFICE_APP/pkg/db/model"
)

func newVMSAMENITY(db *gorm.DB, opts ...gen.DOOption) vMSAMENITY {
	_vMSAMENITY := vMSAMENITY{}

	_vMSAMENITY.vMSAMENITYDo.UseDB(db, opts...)
	_vMSAMENITY.vMSAMENITYDo.UseModel(&model.VMSAMENITY{})

	tableName := _vMSAMENITY.vMSAMENITYDo.TableName()
	_vMSAMENITY.ALL = field.NewAsterisk(tableName)
	_vMSAMENITY.AMENITIESID = field.NewInt64(tableName, "AMENITIES_ID")
	_vMSAMENITY.AMENITIESNAME = field.NewString(tableName, "AMENITIES_NAME")
	_vMSAMENITY.ICON = field.NewString(tableName, "ICON")
	_vMSAMENITY.ISACTIVE = field.NewBool(tableName, "IS_ACTIVE")
	_vMSAMENITY.CREATEDAT = field.NewString(tableName, "CREATED_AT")
	_vMSAMENITY.UPDATEDAT = field.NewString(tableName, "UPDATED_AT")

	_vMSAMENITY.fillFieldMap()

	return _vMSAMENITY
}

type vMSAMENITY struct {
	vMSAMENITYDo

	ALL           field.Asterisk
	AMENITIESID   field.Int64
	AMENITIESNAME field.String
	ICON          field.String
	ISACTIVE      field.Bool
	CREATEDAT     field.String
	UPDATEDAT     field.String

	fieldMap map[string]field.Expr
}

func (v vMSAMENITY) Table(newTableName string) *vMSAMENITY {
	v.vMSAMENITYDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v vMSAMENITY) As(alias string) *vMSAMENITY {
	v.vMSAMENITYDo.DO = *(v.vMSAMENITYDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *vMSAMENITY) updateTableName(table string) *vMSAMENITY {
	v.ALL = field.NewAsterisk(table)
	v.AMENITIESID = field.NewInt64(table, "AMENITIES_ID")
	v.AMENITIESNAME = field.NewString(table, "AMENITIES_NAME")
	v.ICON = field.NewString(table, "ICON")
	v.ISACTIVE = field.NewBool(table, "IS_ACTIVE")
	v.CREATEDAT = field.NewString(table, "CREATED_AT")
	v.UPDATEDAT = field.NewString(table, "UPDATED_AT")

	v.fillFieldMap()

	return v
}

func (v *vMSAMENITY) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *vMSAMENITY) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 6)
	v.fieldMap["AMENITIES_ID"] = v.AMENITIESID
	v.fieldMap["AMENITIES_NAME"] = v.AMENITIESNAME
	v.fieldMap["ICON"] = v.ICON
	v.fieldMap["IS_ACTIVE"] = v.ISACTIVE
	v.fieldMap["CREATED_AT"] = v.CREATEDAT
	v.fieldMap["UPDATED_AT"] = v.UPDATEDAT
}

func (v vMSAMENITY) clone(db *gorm.DB) vMSAMENITY {
	v.vMSAMENITYDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v vMSAMENITY) replaceDB(db *gorm.DB) vMSAMENITY {
	v.vMSAMENITYDo.ReplaceDB(db)
	return v
}

type vMSAMENITYDo struct{ gen.DO }

func (v vMSAMENITYDo) Debug() *vMSAMENITYDo {
	return v.withDO(v.DO.Debug())
}

func (v vMSAMENITYDo) WithContext(ctx context.Context) *vMSAMENITYDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v vMSAMENITYDo) ReadDB() *vMSAMENITYDo {
	return v.Clauses(dbresolver.Read)
}

func (v vMSAMENITYDo) WriteDB() *vMSAMENITYDo {
	return v.Clauses(dbresolver.Write)
}

func (v vMSAMENITYDo) Session(config *gorm.Session) *vMSAMENITYDo {
	return v.withDO(v.DO.Session(config))
}

func (v vMSAMENITYDo) Clauses(conds ...clause.Expression) *vMSAMENITYDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v vMSAMENITYDo) Returning(value interface{}, columns ...string) *vMSAMENITYDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v vMSAMENITYDo) Not(conds ...gen.Condition) *vMSAMENITYDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v vMSAMENITYDo) Or(conds ...gen.Condition) *vMSAMENITYDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v vMSAMENITYDo) Select(conds ...field.Expr) *vMSAMENITYDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v vMSAMENITYDo) Where(conds ...gen.Condition) *vMSAMENITYDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v vMSAMENITYDo) Order(conds ...field.Expr) *vMSAMENITYDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v vMSAMENITYDo) Distinct(cols ...field.Expr) *vMSAMENITYDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v vMSAMENITYDo) Omit(cols ...field.Expr) *vMSAMENITYDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v vMSAMENITYDo) Join(table schema.Tabler, on ...field.Expr) *vMSAMENITYDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v vMSAMENITYDo) LeftJoin(table schema.Tabler, on ...field.Expr) *vMSAMENITYDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v vMSAMENITYDo) RightJoin(table schema.Tabler, on ...field.Expr) *vMSAMENITYDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v vMSAMENITYDo) Group(cols ...field.Expr) *vMSAMENITYDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v vMSAMENITYDo) Having(conds ...gen.Condition) *vMSAMENITYDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v vMSAMENITYDo) Limit(limit int) *vMSAMENITYDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v vMSAMENITYDo) Offset(offset int) *vMSAMENITYDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v vMSAMENITYDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *vMSAMENITYDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v vMSAMENITYDo) Unscoped() *vMSAMENITYDo {
	return v.withDO(v.DO.Unscoped())
}

func (v vMSAMENITYDo) Create(values ...*model.VMSAMENITY) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v vMSAMENITYDo) CreateInBatches(values []*model.VMSAMENITY, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v vMSAMENITYDo) Save(values ...*model.VMSAMENITY) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v vMSAMENITYDo) First() (*model.VMSAMENITY, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VMSAMENITY), nil
	}
}

func (v vMSAMENITYDo) Take() (*model.VMSAMENITY, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VMSAMENITY), nil
	}
}

func (v vMSAMENITYDo) Last() (*model.VMSAMENITY, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VMSAMENITY), nil
	}
}

func (v vMSAMENITYDo) Find() ([]*model.VMSAMENITY, error) {
	result, err := v.DO.Find()
	return result.([]*model.VMSAMENITY), err
}

func (v vMSAMENITYDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VMSAMENITY, err error) {
	buf := make([]*model.VMSAMENITY, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v vMSAMENITYDo) FindInBatches(result *[]*model.VMSAMENITY, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v vMSAMENITYDo) Attrs(attrs ...field.AssignExpr) *vMSAMENITYDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v vMSAMENITYDo) Assign(attrs ...field.AssignExpr) *vMSAMENITYDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v vMSAMENITYDo) Joins(fields ...field.RelationField) *vMSAMENITYDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v vMSAMENITYDo) Preload(fields ...field.RelationField) *vMSAMENITYDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v vMSAMENITYDo) FirstOrInit() (*model.VMSAMENITY, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VMSAMENITY), nil
	}
}

func (v vMSAMENITYDo) FirstOrCreate() (*model.VMSAMENITY, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VMSAMENITY), nil
	}
}

func (v vMSAMENITYDo) FindByPage(offset int, limit int) (result []*model.VMSAMENITY, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v vMSAMENITYDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v vMSAMENITYDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v vMSAMENITYDo) Delete(models ...*model.VMSAMENITY) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *vMSAMENITYDo) withDO(do gen.Dao) *vMSAMENITYDo {
	v.DO = *do.(*gen.DO)
	return v
}
