// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"SMART_OFFICE_APP/pkg/db/model"
)

func newVwVMSRoomAvailabilityCurrentMonth(db *gorm.DB, opts ...gen.DOOption) vwVMSRoomAvailabilityCurrentMonth {
	_vwVMSRoomAvailabilityCurrentMonth := vwVMSRoomAvailabilityCurrentMonth{}

	_vwVMSRoomAvailabilityCurrentMonth.vwVMSRoomAvailabilityCurrentMonthDo.UseDB(db, opts...)
	_vwVMSRoomAvailabilityCurrentMonth.vwVMSRoomAvailabilityCurrentMonthDo.UseModel(&model.VwVMSRoomAvailabilityCurrentMonth{})

	tableName := _vwVMSRoomAvailabilityCurrentMonth.vwVMSRoomAvailabilityCurrentMonthDo.TableName()
	_vwVMSRoomAvailabilityCurrentMonth.ALL = field.NewAsterisk(tableName)
	_vwVMSRoomAvailabilityCurrentMonth.ROOMID = field.NewInt64(tableName, "ROOM_ID")
	_vwVMSRoomAvailabilityCurrentMonth.ROOMNAME = field.NewString(tableName, "ROOM_NAME")
	_vwVMSRoomAvailabilityCurrentMonth.SlotStart = field.NewTime(tableName, "SlotStart")
	_vwVMSRoomAvailabilityCurrentMonth.SlotEnd = field.NewTime(tableName, "SlotEnd")
	_vwVMSRoomAvailabilityCurrentMonth.Status = field.NewString(tableName, "Status")

	_vwVMSRoomAvailabilityCurrentMonth.fillFieldMap()

	return _vwVMSRoomAvailabilityCurrentMonth
}

type vwVMSRoomAvailabilityCurrentMonth struct {
	vwVMSRoomAvailabilityCurrentMonthDo

	ALL       field.Asterisk
	ROOMID    field.Int64
	ROOMNAME  field.String
	SlotStart field.Time
	SlotEnd   field.Time
	Status    field.String

	fieldMap map[string]field.Expr
}

func (v vwVMSRoomAvailabilityCurrentMonth) Table(newTableName string) *vwVMSRoomAvailabilityCurrentMonth {
	v.vwVMSRoomAvailabilityCurrentMonthDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v vwVMSRoomAvailabilityCurrentMonth) As(alias string) *vwVMSRoomAvailabilityCurrentMonth {
	v.vwVMSRoomAvailabilityCurrentMonthDo.DO = *(v.vwVMSRoomAvailabilityCurrentMonthDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *vwVMSRoomAvailabilityCurrentMonth) updateTableName(table string) *vwVMSRoomAvailabilityCurrentMonth {
	v.ALL = field.NewAsterisk(table)
	v.ROOMID = field.NewInt64(table, "ROOM_ID")
	v.ROOMNAME = field.NewString(table, "ROOM_NAME")
	v.SlotStart = field.NewTime(table, "SlotStart")
	v.SlotEnd = field.NewTime(table, "SlotEnd")
	v.Status = field.NewString(table, "Status")

	v.fillFieldMap()

	return v
}

func (v *vwVMSRoomAvailabilityCurrentMonth) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *vwVMSRoomAvailabilityCurrentMonth) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 5)
	v.fieldMap["ROOM_ID"] = v.ROOMID
	v.fieldMap["ROOM_NAME"] = v.ROOMNAME
	v.fieldMap["SlotStart"] = v.SlotStart
	v.fieldMap["SlotEnd"] = v.SlotEnd
	v.fieldMap["Status"] = v.Status
}

func (v vwVMSRoomAvailabilityCurrentMonth) clone(db *gorm.DB) vwVMSRoomAvailabilityCurrentMonth {
	v.vwVMSRoomAvailabilityCurrentMonthDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v vwVMSRoomAvailabilityCurrentMonth) replaceDB(db *gorm.DB) vwVMSRoomAvailabilityCurrentMonth {
	v.vwVMSRoomAvailabilityCurrentMonthDo.ReplaceDB(db)
	return v
}

type vwVMSRoomAvailabilityCurrentMonthDo struct{ gen.DO }

func (v vwVMSRoomAvailabilityCurrentMonthDo) Debug() *vwVMSRoomAvailabilityCurrentMonthDo {
	return v.withDO(v.DO.Debug())
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) WithContext(ctx context.Context) *vwVMSRoomAvailabilityCurrentMonthDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) ReadDB() *vwVMSRoomAvailabilityCurrentMonthDo {
	return v.Clauses(dbresolver.Read)
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) WriteDB() *vwVMSRoomAvailabilityCurrentMonthDo {
	return v.Clauses(dbresolver.Write)
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) Session(config *gorm.Session) *vwVMSRoomAvailabilityCurrentMonthDo {
	return v.withDO(v.DO.Session(config))
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) Clauses(conds ...clause.Expression) *vwVMSRoomAvailabilityCurrentMonthDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) Returning(value interface{}, columns ...string) *vwVMSRoomAvailabilityCurrentMonthDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) Not(conds ...gen.Condition) *vwVMSRoomAvailabilityCurrentMonthDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) Or(conds ...gen.Condition) *vwVMSRoomAvailabilityCurrentMonthDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) Select(conds ...field.Expr) *vwVMSRoomAvailabilityCurrentMonthDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) Where(conds ...gen.Condition) *vwVMSRoomAvailabilityCurrentMonthDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) Order(conds ...field.Expr) *vwVMSRoomAvailabilityCurrentMonthDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) Distinct(cols ...field.Expr) *vwVMSRoomAvailabilityCurrentMonthDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) Omit(cols ...field.Expr) *vwVMSRoomAvailabilityCurrentMonthDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) Join(table schema.Tabler, on ...field.Expr) *vwVMSRoomAvailabilityCurrentMonthDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) LeftJoin(table schema.Tabler, on ...field.Expr) *vwVMSRoomAvailabilityCurrentMonthDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) RightJoin(table schema.Tabler, on ...field.Expr) *vwVMSRoomAvailabilityCurrentMonthDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) Group(cols ...field.Expr) *vwVMSRoomAvailabilityCurrentMonthDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) Having(conds ...gen.Condition) *vwVMSRoomAvailabilityCurrentMonthDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) Limit(limit int) *vwVMSRoomAvailabilityCurrentMonthDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) Offset(offset int) *vwVMSRoomAvailabilityCurrentMonthDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *vwVMSRoomAvailabilityCurrentMonthDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) Unscoped() *vwVMSRoomAvailabilityCurrentMonthDo {
	return v.withDO(v.DO.Unscoped())
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) Create(values ...*model.VwVMSRoomAvailabilityCurrentMonth) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) CreateInBatches(values []*model.VwVMSRoomAvailabilityCurrentMonth, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v vwVMSRoomAvailabilityCurrentMonthDo) Save(values ...*model.VwVMSRoomAvailabilityCurrentMonth) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) First() (*model.VwVMSRoomAvailabilityCurrentMonth, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VwVMSRoomAvailabilityCurrentMonth), nil
	}
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) Take() (*model.VwVMSRoomAvailabilityCurrentMonth, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VwVMSRoomAvailabilityCurrentMonth), nil
	}
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) Last() (*model.VwVMSRoomAvailabilityCurrentMonth, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VwVMSRoomAvailabilityCurrentMonth), nil
	}
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) Find() ([]*model.VwVMSRoomAvailabilityCurrentMonth, error) {
	result, err := v.DO.Find()
	return result.([]*model.VwVMSRoomAvailabilityCurrentMonth), err
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VwVMSRoomAvailabilityCurrentMonth, err error) {
	buf := make([]*model.VwVMSRoomAvailabilityCurrentMonth, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) FindInBatches(result *[]*model.VwVMSRoomAvailabilityCurrentMonth, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) Attrs(attrs ...field.AssignExpr) *vwVMSRoomAvailabilityCurrentMonthDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) Assign(attrs ...field.AssignExpr) *vwVMSRoomAvailabilityCurrentMonthDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) Joins(fields ...field.RelationField) *vwVMSRoomAvailabilityCurrentMonthDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) Preload(fields ...field.RelationField) *vwVMSRoomAvailabilityCurrentMonthDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) FirstOrInit() (*model.VwVMSRoomAvailabilityCurrentMonth, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VwVMSRoomAvailabilityCurrentMonth), nil
	}
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) FirstOrCreate() (*model.VwVMSRoomAvailabilityCurrentMonth, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VwVMSRoomAvailabilityCurrentMonth), nil
	}
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) FindByPage(offset int, limit int) (result []*model.VwVMSRoomAvailabilityCurrentMonth, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v vwVMSRoomAvailabilityCurrentMonthDo) Delete(models ...*model.VwVMSRoomAvailabilityCurrentMonth) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *vwVMSRoomAvailabilityCurrentMonthDo) withDO(do gen.Dao) *vwVMSRoomAvailabilityCurrentMonthDo {
	v.DO = *do.(*gen.DO)
	return v
}
