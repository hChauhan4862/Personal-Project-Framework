// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                                db,
		APPCONFIG:                         newAPPCONFIG(db, opts...),
		APPLOGINSESSION:                   newAPPLOGINSESSION(db, opts...),
		APPPLATFORMCAT:                    newAPPPLATFORMCAT(db, opts...),
		APPRESPONSECODE:                   newAPPRESPONSECODE(db, opts...),
		APPRESPONSECODESCAT:               newAPPRESPONSECODESCAT(db, opts...),
		COMMUNICATIONEMAIL:                newCOMMUNICATIONEMAIL(db, opts...),
		COMMUNICATIONWEBPUSH:              newCOMMUNICATIONWEBPUSH(db, opts...),
		ORGCOMPANY:                        newORGCOMPANY(db, opts...),
		ORGDAILYTIME:                      newORGDAILYTIME(db, opts...),
		ORGDEPTCODE:                       newORGDEPTCODE(db, opts...),
		ORGEMPLOYEE:                       newORGEMPLOYEE(db, opts...),
		ORGFLOOR:                          newORGFLOOR(db, opts...),
		ORGHOLIDAY:                        newORGHOLIDAY(db, opts...),
		ORGIDENTITYCODE:                   newORGIDENTITYCODE(db, opts...),
		ORGNOTICE:                         newORGNOTICE(db, opts...),
		ORGOFFICE:                         newORGOFFICE(db, opts...),
		ORGROLECODE:                       newORGROLECODE(db, opts...),
		ORGROOM:                           newORGROOM(db, opts...),
		ORGROOMSCAT:                       newORGROOMSCAT(db, opts...),
		ORGSPECIALCLOSE:                   newORGSPECIALCLOSE(db, opts...),
		PANTRYINVENTORYREGISTER:           newPANTRYINVENTORYREGISTER(db, opts...),
		PANTRYITEM:                        newPANTRYITEM(db, opts...),
		PANTRYITEMSCAT:                    newPANTRYITEMSCAT(db, opts...),
		PANTRYITEMSMAP:                    newPANTRYITEMSMAP(db, opts...),
		PANTRYITEMUNIT:                    newPANTRYITEMUNIT(db, opts...),
		PANTRYLIST:                        newPANTRYLIST(db, opts...),
		PANTRYORDER:                       newPANTRYORDER(db, opts...),
		PANTRYORDERSITEM:                  newPANTRYORDERSITEM(db, opts...),
		PANTRYROOMPANTRYMAPPING:           newPANTRYROOMPANTRYMAPPING(db, opts...),
		VMSAMENITY:                        newVMSAMENITY(db, opts...),
		VMSBOOKING:                        newVMSBOOKING(db, opts...),
		VMSBOOKINGSMEMBER:                 newVMSBOOKINGSMEMBER(db, opts...),
		VMSDISPLAY:                        newVMSDISPLAY(db, opts...),
		VMSRESTRICTIONSETTING:             newVMSRESTRICTIONSETTING(db, opts...),
		VMSROOMAMENITIESMAP:               newVMSROOMAMENITIESMAP(db, opts...),
		VwVMSRoomAvailabilityCurrentMonth: newVwVMSRoomAvailabilityCurrentMonth(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	APPCONFIG                         aPPCONFIG
	APPLOGINSESSION                   aPPLOGINSESSION
	APPPLATFORMCAT                    aPPPLATFORMCAT
	APPRESPONSECODE                   aPPRESPONSECODE
	APPRESPONSECODESCAT               aPPRESPONSECODESCAT
	COMMUNICATIONEMAIL                cOMMUNICATIONEMAIL
	COMMUNICATIONWEBPUSH              cOMMUNICATIONWEBPUSH
	ORGCOMPANY                        oRGCOMPANY
	ORGDAILYTIME                      oRGDAILYTIME
	ORGDEPTCODE                       oRGDEPTCODE
	ORGEMPLOYEE                       oRGEMPLOYEE
	ORGFLOOR                          oRGFLOOR
	ORGHOLIDAY                        oRGHOLIDAY
	ORGIDENTITYCODE                   oRGIDENTITYCODE
	ORGNOTICE                         oRGNOTICE
	ORGOFFICE                         oRGOFFICE
	ORGROLECODE                       oRGROLECODE
	ORGROOM                           oRGROOM
	ORGROOMSCAT                       oRGROOMSCAT
	ORGSPECIALCLOSE                   oRGSPECIALCLOSE
	PANTRYINVENTORYREGISTER           pANTRYINVENTORYREGISTER
	PANTRYITEM                        pANTRYITEM
	PANTRYITEMSCAT                    pANTRYITEMSCAT
	PANTRYITEMSMAP                    pANTRYITEMSMAP
	PANTRYITEMUNIT                    pANTRYITEMUNIT
	PANTRYLIST                        pANTRYLIST
	PANTRYORDER                       pANTRYORDER
	PANTRYORDERSITEM                  pANTRYORDERSITEM
	PANTRYROOMPANTRYMAPPING           pANTRYROOMPANTRYMAPPING
	VMSAMENITY                        vMSAMENITY
	VMSBOOKING                        vMSBOOKING
	VMSBOOKINGSMEMBER                 vMSBOOKINGSMEMBER
	VMSDISPLAY                        vMSDISPLAY
	VMSRESTRICTIONSETTING             vMSRESTRICTIONSETTING
	VMSROOMAMENITIESMAP               vMSROOMAMENITIESMAP
	VwVMSRoomAvailabilityCurrentMonth vwVMSRoomAvailabilityCurrentMonth
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                                db,
		APPCONFIG:                         q.APPCONFIG.clone(db),
		APPLOGINSESSION:                   q.APPLOGINSESSION.clone(db),
		APPPLATFORMCAT:                    q.APPPLATFORMCAT.clone(db),
		APPRESPONSECODE:                   q.APPRESPONSECODE.clone(db),
		APPRESPONSECODESCAT:               q.APPRESPONSECODESCAT.clone(db),
		COMMUNICATIONEMAIL:                q.COMMUNICATIONEMAIL.clone(db),
		COMMUNICATIONWEBPUSH:              q.COMMUNICATIONWEBPUSH.clone(db),
		ORGCOMPANY:                        q.ORGCOMPANY.clone(db),
		ORGDAILYTIME:                      q.ORGDAILYTIME.clone(db),
		ORGDEPTCODE:                       q.ORGDEPTCODE.clone(db),
		ORGEMPLOYEE:                       q.ORGEMPLOYEE.clone(db),
		ORGFLOOR:                          q.ORGFLOOR.clone(db),
		ORGHOLIDAY:                        q.ORGHOLIDAY.clone(db),
		ORGIDENTITYCODE:                   q.ORGIDENTITYCODE.clone(db),
		ORGNOTICE:                         q.ORGNOTICE.clone(db),
		ORGOFFICE:                         q.ORGOFFICE.clone(db),
		ORGROLECODE:                       q.ORGROLECODE.clone(db),
		ORGROOM:                           q.ORGROOM.clone(db),
		ORGROOMSCAT:                       q.ORGROOMSCAT.clone(db),
		ORGSPECIALCLOSE:                   q.ORGSPECIALCLOSE.clone(db),
		PANTRYINVENTORYREGISTER:           q.PANTRYINVENTORYREGISTER.clone(db),
		PANTRYITEM:                        q.PANTRYITEM.clone(db),
		PANTRYITEMSCAT:                    q.PANTRYITEMSCAT.clone(db),
		PANTRYITEMSMAP:                    q.PANTRYITEMSMAP.clone(db),
		PANTRYITEMUNIT:                    q.PANTRYITEMUNIT.clone(db),
		PANTRYLIST:                        q.PANTRYLIST.clone(db),
		PANTRYORDER:                       q.PANTRYORDER.clone(db),
		PANTRYORDERSITEM:                  q.PANTRYORDERSITEM.clone(db),
		PANTRYROOMPANTRYMAPPING:           q.PANTRYROOMPANTRYMAPPING.clone(db),
		VMSAMENITY:                        q.VMSAMENITY.clone(db),
		VMSBOOKING:                        q.VMSBOOKING.clone(db),
		VMSBOOKINGSMEMBER:                 q.VMSBOOKINGSMEMBER.clone(db),
		VMSDISPLAY:                        q.VMSDISPLAY.clone(db),
		VMSRESTRICTIONSETTING:             q.VMSRESTRICTIONSETTING.clone(db),
		VMSROOMAMENITIESMAP:               q.VMSROOMAMENITIESMAP.clone(db),
		VwVMSRoomAvailabilityCurrentMonth: q.VwVMSRoomAvailabilityCurrentMonth.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                                db,
		APPCONFIG:                         q.APPCONFIG.replaceDB(db),
		APPLOGINSESSION:                   q.APPLOGINSESSION.replaceDB(db),
		APPPLATFORMCAT:                    q.APPPLATFORMCAT.replaceDB(db),
		APPRESPONSECODE:                   q.APPRESPONSECODE.replaceDB(db),
		APPRESPONSECODESCAT:               q.APPRESPONSECODESCAT.replaceDB(db),
		COMMUNICATIONEMAIL:                q.COMMUNICATIONEMAIL.replaceDB(db),
		COMMUNICATIONWEBPUSH:              q.COMMUNICATIONWEBPUSH.replaceDB(db),
		ORGCOMPANY:                        q.ORGCOMPANY.replaceDB(db),
		ORGDAILYTIME:                      q.ORGDAILYTIME.replaceDB(db),
		ORGDEPTCODE:                       q.ORGDEPTCODE.replaceDB(db),
		ORGEMPLOYEE:                       q.ORGEMPLOYEE.replaceDB(db),
		ORGFLOOR:                          q.ORGFLOOR.replaceDB(db),
		ORGHOLIDAY:                        q.ORGHOLIDAY.replaceDB(db),
		ORGIDENTITYCODE:                   q.ORGIDENTITYCODE.replaceDB(db),
		ORGNOTICE:                         q.ORGNOTICE.replaceDB(db),
		ORGOFFICE:                         q.ORGOFFICE.replaceDB(db),
		ORGROLECODE:                       q.ORGROLECODE.replaceDB(db),
		ORGROOM:                           q.ORGROOM.replaceDB(db),
		ORGROOMSCAT:                       q.ORGROOMSCAT.replaceDB(db),
		ORGSPECIALCLOSE:                   q.ORGSPECIALCLOSE.replaceDB(db),
		PANTRYINVENTORYREGISTER:           q.PANTRYINVENTORYREGISTER.replaceDB(db),
		PANTRYITEM:                        q.PANTRYITEM.replaceDB(db),
		PANTRYITEMSCAT:                    q.PANTRYITEMSCAT.replaceDB(db),
		PANTRYITEMSMAP:                    q.PANTRYITEMSMAP.replaceDB(db),
		PANTRYITEMUNIT:                    q.PANTRYITEMUNIT.replaceDB(db),
		PANTRYLIST:                        q.PANTRYLIST.replaceDB(db),
		PANTRYORDER:                       q.PANTRYORDER.replaceDB(db),
		PANTRYORDERSITEM:                  q.PANTRYORDERSITEM.replaceDB(db),
		PANTRYROOMPANTRYMAPPING:           q.PANTRYROOMPANTRYMAPPING.replaceDB(db),
		VMSAMENITY:                        q.VMSAMENITY.replaceDB(db),
		VMSBOOKING:                        q.VMSBOOKING.replaceDB(db),
		VMSBOOKINGSMEMBER:                 q.VMSBOOKINGSMEMBER.replaceDB(db),
		VMSDISPLAY:                        q.VMSDISPLAY.replaceDB(db),
		VMSRESTRICTIONSETTING:             q.VMSRESTRICTIONSETTING.replaceDB(db),
		VMSROOMAMENITIESMAP:               q.VMSROOMAMENITIESMAP.replaceDB(db),
		VwVMSRoomAvailabilityCurrentMonth: q.VwVMSRoomAvailabilityCurrentMonth.replaceDB(db),
	}
}

type queryCtx struct {
	APPCONFIG                         *aPPCONFIGDo
	APPLOGINSESSION                   *aPPLOGINSESSIONDo
	APPPLATFORMCAT                    *aPPPLATFORMCATDo
	APPRESPONSECODE                   *aPPRESPONSECODEDo
	APPRESPONSECODESCAT               *aPPRESPONSECODESCATDo
	COMMUNICATIONEMAIL                *cOMMUNICATIONEMAILDo
	COMMUNICATIONWEBPUSH              *cOMMUNICATIONWEBPUSHDo
	ORGCOMPANY                        *oRGCOMPANYDo
	ORGDAILYTIME                      *oRGDAILYTIMEDo
	ORGDEPTCODE                       *oRGDEPTCODEDo
	ORGEMPLOYEE                       *oRGEMPLOYEEDo
	ORGFLOOR                          *oRGFLOORDo
	ORGHOLIDAY                        *oRGHOLIDAYDo
	ORGIDENTITYCODE                   *oRGIDENTITYCODEDo
	ORGNOTICE                         *oRGNOTICEDo
	ORGOFFICE                         *oRGOFFICEDo
	ORGROLECODE                       *oRGROLECODEDo
	ORGROOM                           *oRGROOMDo
	ORGROOMSCAT                       *oRGROOMSCATDo
	ORGSPECIALCLOSE                   *oRGSPECIALCLOSEDo
	PANTRYINVENTORYREGISTER           *pANTRYINVENTORYREGISTERDo
	PANTRYITEM                        *pANTRYITEMDo
	PANTRYITEMSCAT                    *pANTRYITEMSCATDo
	PANTRYITEMSMAP                    *pANTRYITEMSMAPDo
	PANTRYITEMUNIT                    *pANTRYITEMUNITDo
	PANTRYLIST                        *pANTRYLISTDo
	PANTRYORDER                       *pANTRYORDERDo
	PANTRYORDERSITEM                  *pANTRYORDERSITEMDo
	PANTRYROOMPANTRYMAPPING           *pANTRYROOMPANTRYMAPPINGDo
	VMSAMENITY                        *vMSAMENITYDo
	VMSBOOKING                        *vMSBOOKINGDo
	VMSBOOKINGSMEMBER                 *vMSBOOKINGSMEMBERDo
	VMSDISPLAY                        *vMSDISPLAYDo
	VMSRESTRICTIONSETTING             *vMSRESTRICTIONSETTINGDo
	VMSROOMAMENITIESMAP               *vMSROOMAMENITIESMAPDo
	VwVMSRoomAvailabilityCurrentMonth *vwVMSRoomAvailabilityCurrentMonthDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		APPCONFIG:                         q.APPCONFIG.WithContext(ctx),
		APPLOGINSESSION:                   q.APPLOGINSESSION.WithContext(ctx),
		APPPLATFORMCAT:                    q.APPPLATFORMCAT.WithContext(ctx),
		APPRESPONSECODE:                   q.APPRESPONSECODE.WithContext(ctx),
		APPRESPONSECODESCAT:               q.APPRESPONSECODESCAT.WithContext(ctx),
		COMMUNICATIONEMAIL:                q.COMMUNICATIONEMAIL.WithContext(ctx),
		COMMUNICATIONWEBPUSH:              q.COMMUNICATIONWEBPUSH.WithContext(ctx),
		ORGCOMPANY:                        q.ORGCOMPANY.WithContext(ctx),
		ORGDAILYTIME:                      q.ORGDAILYTIME.WithContext(ctx),
		ORGDEPTCODE:                       q.ORGDEPTCODE.WithContext(ctx),
		ORGEMPLOYEE:                       q.ORGEMPLOYEE.WithContext(ctx),
		ORGFLOOR:                          q.ORGFLOOR.WithContext(ctx),
		ORGHOLIDAY:                        q.ORGHOLIDAY.WithContext(ctx),
		ORGIDENTITYCODE:                   q.ORGIDENTITYCODE.WithContext(ctx),
		ORGNOTICE:                         q.ORGNOTICE.WithContext(ctx),
		ORGOFFICE:                         q.ORGOFFICE.WithContext(ctx),
		ORGROLECODE:                       q.ORGROLECODE.WithContext(ctx),
		ORGROOM:                           q.ORGROOM.WithContext(ctx),
		ORGROOMSCAT:                       q.ORGROOMSCAT.WithContext(ctx),
		ORGSPECIALCLOSE:                   q.ORGSPECIALCLOSE.WithContext(ctx),
		PANTRYINVENTORYREGISTER:           q.PANTRYINVENTORYREGISTER.WithContext(ctx),
		PANTRYITEM:                        q.PANTRYITEM.WithContext(ctx),
		PANTRYITEMSCAT:                    q.PANTRYITEMSCAT.WithContext(ctx),
		PANTRYITEMSMAP:                    q.PANTRYITEMSMAP.WithContext(ctx),
		PANTRYITEMUNIT:                    q.PANTRYITEMUNIT.WithContext(ctx),
		PANTRYLIST:                        q.PANTRYLIST.WithContext(ctx),
		PANTRYORDER:                       q.PANTRYORDER.WithContext(ctx),
		PANTRYORDERSITEM:                  q.PANTRYORDERSITEM.WithContext(ctx),
		PANTRYROOMPANTRYMAPPING:           q.PANTRYROOMPANTRYMAPPING.WithContext(ctx),
		VMSAMENITY:                        q.VMSAMENITY.WithContext(ctx),
		VMSBOOKING:                        q.VMSBOOKING.WithContext(ctx),
		VMSBOOKINGSMEMBER:                 q.VMSBOOKINGSMEMBER.WithContext(ctx),
		VMSDISPLAY:                        q.VMSDISPLAY.WithContext(ctx),
		VMSRESTRICTIONSETTING:             q.VMSRESTRICTIONSETTING.WithContext(ctx),
		VMSROOMAMENITIESMAP:               q.VMSROOMAMENITIESMAP.WithContext(ctx),
		VwVMSRoomAvailabilityCurrentMonth: q.VwVMSRoomAvailabilityCurrentMonth.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
