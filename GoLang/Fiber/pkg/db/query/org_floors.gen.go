// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"SMART_OFFICE_APP/pkg/db/model"
)

func newORGFLOOR(db *gorm.DB, opts ...gen.DOOption) oRGFLOOR {
	_oRGFLOOR := oRGFLOOR{}

	_oRGFLOOR.oRGFLOORDo.UseDB(db, opts...)
	_oRGFLOOR.oRGFLOORDo.UseModel(&model.ORGFLOOR{})

	tableName := _oRGFLOOR.oRGFLOORDo.TableName()
	_oRGFLOOR.ALL = field.NewAsterisk(tableName)
	_oRGFLOOR.FLOORSEQ = field.NewInt64(tableName, "FLOOR_SEQ")
	_oRGFLOOR.FLOORNAME = field.NewString(tableName, "FLOOR_NAME")
	_oRGFLOOR.OFFICEUNQCD = field.NewString(tableName, "OFFICE_UNQCD")
	_oRGFLOOR.ISACTIVE = field.NewBool(tableName, "IS_ACTIVE")

	_oRGFLOOR.fillFieldMap()

	return _oRGFLOOR
}

type oRGFLOOR struct {
	oRGFLOORDo

	ALL         field.Asterisk
	FLOORSEQ    field.Int64
	FLOORNAME   field.String
	OFFICEUNQCD field.String
	ISACTIVE    field.Bool

	fieldMap map[string]field.Expr
}

func (o oRGFLOOR) Table(newTableName string) *oRGFLOOR {
	o.oRGFLOORDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o oRGFLOOR) As(alias string) *oRGFLOOR {
	o.oRGFLOORDo.DO = *(o.oRGFLOORDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *oRGFLOOR) updateTableName(table string) *oRGFLOOR {
	o.ALL = field.NewAsterisk(table)
	o.FLOORSEQ = field.NewInt64(table, "FLOOR_SEQ")
	o.FLOORNAME = field.NewString(table, "FLOOR_NAME")
	o.OFFICEUNQCD = field.NewString(table, "OFFICE_UNQCD")
	o.ISACTIVE = field.NewBool(table, "IS_ACTIVE")

	o.fillFieldMap()

	return o
}

func (o *oRGFLOOR) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *oRGFLOOR) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 4)
	o.fieldMap["FLOOR_SEQ"] = o.FLOORSEQ
	o.fieldMap["FLOOR_NAME"] = o.FLOORNAME
	o.fieldMap["OFFICE_UNQCD"] = o.OFFICEUNQCD
	o.fieldMap["IS_ACTIVE"] = o.ISACTIVE
}

func (o oRGFLOOR) clone(db *gorm.DB) oRGFLOOR {
	o.oRGFLOORDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o oRGFLOOR) replaceDB(db *gorm.DB) oRGFLOOR {
	o.oRGFLOORDo.ReplaceDB(db)
	return o
}

type oRGFLOORDo struct{ gen.DO }

func (o oRGFLOORDo) Debug() *oRGFLOORDo {
	return o.withDO(o.DO.Debug())
}

func (o oRGFLOORDo) WithContext(ctx context.Context) *oRGFLOORDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o oRGFLOORDo) ReadDB() *oRGFLOORDo {
	return o.Clauses(dbresolver.Read)
}

func (o oRGFLOORDo) WriteDB() *oRGFLOORDo {
	return o.Clauses(dbresolver.Write)
}

func (o oRGFLOORDo) Session(config *gorm.Session) *oRGFLOORDo {
	return o.withDO(o.DO.Session(config))
}

func (o oRGFLOORDo) Clauses(conds ...clause.Expression) *oRGFLOORDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o oRGFLOORDo) Returning(value interface{}, columns ...string) *oRGFLOORDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o oRGFLOORDo) Not(conds ...gen.Condition) *oRGFLOORDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o oRGFLOORDo) Or(conds ...gen.Condition) *oRGFLOORDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o oRGFLOORDo) Select(conds ...field.Expr) *oRGFLOORDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o oRGFLOORDo) Where(conds ...gen.Condition) *oRGFLOORDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o oRGFLOORDo) Order(conds ...field.Expr) *oRGFLOORDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o oRGFLOORDo) Distinct(cols ...field.Expr) *oRGFLOORDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o oRGFLOORDo) Omit(cols ...field.Expr) *oRGFLOORDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o oRGFLOORDo) Join(table schema.Tabler, on ...field.Expr) *oRGFLOORDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o oRGFLOORDo) LeftJoin(table schema.Tabler, on ...field.Expr) *oRGFLOORDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o oRGFLOORDo) RightJoin(table schema.Tabler, on ...field.Expr) *oRGFLOORDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o oRGFLOORDo) Group(cols ...field.Expr) *oRGFLOORDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o oRGFLOORDo) Having(conds ...gen.Condition) *oRGFLOORDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o oRGFLOORDo) Limit(limit int) *oRGFLOORDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o oRGFLOORDo) Offset(offset int) *oRGFLOORDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o oRGFLOORDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *oRGFLOORDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o oRGFLOORDo) Unscoped() *oRGFLOORDo {
	return o.withDO(o.DO.Unscoped())
}

func (o oRGFLOORDo) Create(values ...*model.ORGFLOOR) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o oRGFLOORDo) CreateInBatches(values []*model.ORGFLOOR, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o oRGFLOORDo) Save(values ...*model.ORGFLOOR) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o oRGFLOORDo) First() (*model.ORGFLOOR, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGFLOOR), nil
	}
}

func (o oRGFLOORDo) Take() (*model.ORGFLOOR, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGFLOOR), nil
	}
}

func (o oRGFLOORDo) Last() (*model.ORGFLOOR, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGFLOOR), nil
	}
}

func (o oRGFLOORDo) Find() ([]*model.ORGFLOOR, error) {
	result, err := o.DO.Find()
	return result.([]*model.ORGFLOOR), err
}

func (o oRGFLOORDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ORGFLOOR, err error) {
	buf := make([]*model.ORGFLOOR, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o oRGFLOORDo) FindInBatches(result *[]*model.ORGFLOOR, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o oRGFLOORDo) Attrs(attrs ...field.AssignExpr) *oRGFLOORDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o oRGFLOORDo) Assign(attrs ...field.AssignExpr) *oRGFLOORDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o oRGFLOORDo) Joins(fields ...field.RelationField) *oRGFLOORDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o oRGFLOORDo) Preload(fields ...field.RelationField) *oRGFLOORDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o oRGFLOORDo) FirstOrInit() (*model.ORGFLOOR, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGFLOOR), nil
	}
}

func (o oRGFLOORDo) FirstOrCreate() (*model.ORGFLOOR, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGFLOOR), nil
	}
}

func (o oRGFLOORDo) FindByPage(offset int, limit int) (result []*model.ORGFLOOR, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o oRGFLOORDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o oRGFLOORDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o oRGFLOORDo) Delete(models ...*model.ORGFLOOR) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *oRGFLOORDo) withDO(do gen.Dao) *oRGFLOORDo {
	o.DO = *do.(*gen.DO)
	return o
}
