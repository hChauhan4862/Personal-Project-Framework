// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"SMART_OFFICE_APP/pkg/db/model"
)

func newVMSRESTRICTIONSETTING(db *gorm.DB, opts ...gen.DOOption) vMSRESTRICTIONSETTING {
	_vMSRESTRICTIONSETTING := vMSRESTRICTIONSETTING{}

	_vMSRESTRICTIONSETTING.vMSRESTRICTIONSETTINGDo.UseDB(db, opts...)
	_vMSRESTRICTIONSETTING.vMSRESTRICTIONSETTINGDo.UseModel(&model.VMSRESTRICTIONSETTING{})

	tableName := _vMSRESTRICTIONSETTING.vMSRESTRICTIONSETTINGDo.TableName()
	_vMSRESTRICTIONSETTING.ALL = field.NewAsterisk(tableName)
	_vMSRESTRICTIONSETTING.ID = field.NewInt64(tableName, "ID")
	_vMSRESTRICTIONSETTING.LOCATION = field.NewString(tableName, "LOCATION")
	_vMSRESTRICTIONSETTING.LOCATIONID = field.NewInt64(tableName, "LOCATION_ID")
	_vMSRESTRICTIONSETTING.ISCONFIRMATIONREQUIRED = field.NewBool(tableName, "IS_CONFIRMATION_REQUIRED")
	_vMSRESTRICTIONSETTING.CONFIRMATIONWAITTIME = field.NewInt64(tableName, "CONFIRMATION_WAIT_TIME")
	_vMSRESTRICTIONSETTING.ISAPPROVALREQUIRED = field.NewBool(tableName, "IS_APPROVAL_REQUIRED")
	_vMSRESTRICTIONSETTING.APPROVALWAITTIME = field.NewInt64(tableName, "APPROVAL_WAIT_TIME")
	_vMSRESTRICTIONSETTING.ISAUTOCANCELALLOWED = field.NewBool(tableName, "IS_AUTO_CANCEL_ALLOWED")
	_vMSRESTRICTIONSETTING.CANCELLATIONWAITTIME = field.NewInt64(tableName, "CANCELLATION_WAIT_TIME")
	_vMSRESTRICTIONSETTING.ISMESSAGEALLOWED = field.NewBool(tableName, "IS_MESSAGE_ALLOWED")
	_vMSRESTRICTIONSETTING.IDENTITYRESTRICTION = field.NewBool(tableName, "IDENTITY_RESTRICTION")
	_vMSRESTRICTIONSETTING.DEPARTMENTRESTRICTION = field.NewBool(tableName, "DEPARTMENT_RESTRICTION")

	_vMSRESTRICTIONSETTING.fillFieldMap()

	return _vMSRESTRICTIONSETTING
}

type vMSRESTRICTIONSETTING struct {
	vMSRESTRICTIONSETTINGDo

	ALL                    field.Asterisk
	ID                     field.Int64
	LOCATION               field.String
	LOCATIONID             field.Int64
	ISCONFIRMATIONREQUIRED field.Bool
	CONFIRMATIONWAITTIME   field.Int64
	ISAPPROVALREQUIRED     field.Bool
	APPROVALWAITTIME       field.Int64
	ISAUTOCANCELALLOWED    field.Bool
	CANCELLATIONWAITTIME   field.Int64
	ISMESSAGEALLOWED       field.Bool
	IDENTITYRESTRICTION    field.Bool
	DEPARTMENTRESTRICTION  field.Bool

	fieldMap map[string]field.Expr
}

func (v vMSRESTRICTIONSETTING) Table(newTableName string) *vMSRESTRICTIONSETTING {
	v.vMSRESTRICTIONSETTINGDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v vMSRESTRICTIONSETTING) As(alias string) *vMSRESTRICTIONSETTING {
	v.vMSRESTRICTIONSETTINGDo.DO = *(v.vMSRESTRICTIONSETTINGDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *vMSRESTRICTIONSETTING) updateTableName(table string) *vMSRESTRICTIONSETTING {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewInt64(table, "ID")
	v.LOCATION = field.NewString(table, "LOCATION")
	v.LOCATIONID = field.NewInt64(table, "LOCATION_ID")
	v.ISCONFIRMATIONREQUIRED = field.NewBool(table, "IS_CONFIRMATION_REQUIRED")
	v.CONFIRMATIONWAITTIME = field.NewInt64(table, "CONFIRMATION_WAIT_TIME")
	v.ISAPPROVALREQUIRED = field.NewBool(table, "IS_APPROVAL_REQUIRED")
	v.APPROVALWAITTIME = field.NewInt64(table, "APPROVAL_WAIT_TIME")
	v.ISAUTOCANCELALLOWED = field.NewBool(table, "IS_AUTO_CANCEL_ALLOWED")
	v.CANCELLATIONWAITTIME = field.NewInt64(table, "CANCELLATION_WAIT_TIME")
	v.ISMESSAGEALLOWED = field.NewBool(table, "IS_MESSAGE_ALLOWED")
	v.IDENTITYRESTRICTION = field.NewBool(table, "IDENTITY_RESTRICTION")
	v.DEPARTMENTRESTRICTION = field.NewBool(table, "DEPARTMENT_RESTRICTION")

	v.fillFieldMap()

	return v
}

func (v *vMSRESTRICTIONSETTING) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *vMSRESTRICTIONSETTING) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 12)
	v.fieldMap["ID"] = v.ID
	v.fieldMap["LOCATION"] = v.LOCATION
	v.fieldMap["LOCATION_ID"] = v.LOCATIONID
	v.fieldMap["IS_CONFIRMATION_REQUIRED"] = v.ISCONFIRMATIONREQUIRED
	v.fieldMap["CONFIRMATION_WAIT_TIME"] = v.CONFIRMATIONWAITTIME
	v.fieldMap["IS_APPROVAL_REQUIRED"] = v.ISAPPROVALREQUIRED
	v.fieldMap["APPROVAL_WAIT_TIME"] = v.APPROVALWAITTIME
	v.fieldMap["IS_AUTO_CANCEL_ALLOWED"] = v.ISAUTOCANCELALLOWED
	v.fieldMap["CANCELLATION_WAIT_TIME"] = v.CANCELLATIONWAITTIME
	v.fieldMap["IS_MESSAGE_ALLOWED"] = v.ISMESSAGEALLOWED
	v.fieldMap["IDENTITY_RESTRICTION"] = v.IDENTITYRESTRICTION
	v.fieldMap["DEPARTMENT_RESTRICTION"] = v.DEPARTMENTRESTRICTION
}

func (v vMSRESTRICTIONSETTING) clone(db *gorm.DB) vMSRESTRICTIONSETTING {
	v.vMSRESTRICTIONSETTINGDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v vMSRESTRICTIONSETTING) replaceDB(db *gorm.DB) vMSRESTRICTIONSETTING {
	v.vMSRESTRICTIONSETTINGDo.ReplaceDB(db)
	return v
}

type vMSRESTRICTIONSETTINGDo struct{ gen.DO }

func (v vMSRESTRICTIONSETTINGDo) Debug() *vMSRESTRICTIONSETTINGDo {
	return v.withDO(v.DO.Debug())
}

func (v vMSRESTRICTIONSETTINGDo) WithContext(ctx context.Context) *vMSRESTRICTIONSETTINGDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v vMSRESTRICTIONSETTINGDo) ReadDB() *vMSRESTRICTIONSETTINGDo {
	return v.Clauses(dbresolver.Read)
}

func (v vMSRESTRICTIONSETTINGDo) WriteDB() *vMSRESTRICTIONSETTINGDo {
	return v.Clauses(dbresolver.Write)
}

func (v vMSRESTRICTIONSETTINGDo) Session(config *gorm.Session) *vMSRESTRICTIONSETTINGDo {
	return v.withDO(v.DO.Session(config))
}

func (v vMSRESTRICTIONSETTINGDo) Clauses(conds ...clause.Expression) *vMSRESTRICTIONSETTINGDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v vMSRESTRICTIONSETTINGDo) Returning(value interface{}, columns ...string) *vMSRESTRICTIONSETTINGDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v vMSRESTRICTIONSETTINGDo) Not(conds ...gen.Condition) *vMSRESTRICTIONSETTINGDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v vMSRESTRICTIONSETTINGDo) Or(conds ...gen.Condition) *vMSRESTRICTIONSETTINGDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v vMSRESTRICTIONSETTINGDo) Select(conds ...field.Expr) *vMSRESTRICTIONSETTINGDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v vMSRESTRICTIONSETTINGDo) Where(conds ...gen.Condition) *vMSRESTRICTIONSETTINGDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v vMSRESTRICTIONSETTINGDo) Order(conds ...field.Expr) *vMSRESTRICTIONSETTINGDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v vMSRESTRICTIONSETTINGDo) Distinct(cols ...field.Expr) *vMSRESTRICTIONSETTINGDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v vMSRESTRICTIONSETTINGDo) Omit(cols ...field.Expr) *vMSRESTRICTIONSETTINGDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v vMSRESTRICTIONSETTINGDo) Join(table schema.Tabler, on ...field.Expr) *vMSRESTRICTIONSETTINGDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v vMSRESTRICTIONSETTINGDo) LeftJoin(table schema.Tabler, on ...field.Expr) *vMSRESTRICTIONSETTINGDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v vMSRESTRICTIONSETTINGDo) RightJoin(table schema.Tabler, on ...field.Expr) *vMSRESTRICTIONSETTINGDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v vMSRESTRICTIONSETTINGDo) Group(cols ...field.Expr) *vMSRESTRICTIONSETTINGDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v vMSRESTRICTIONSETTINGDo) Having(conds ...gen.Condition) *vMSRESTRICTIONSETTINGDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v vMSRESTRICTIONSETTINGDo) Limit(limit int) *vMSRESTRICTIONSETTINGDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v vMSRESTRICTIONSETTINGDo) Offset(offset int) *vMSRESTRICTIONSETTINGDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v vMSRESTRICTIONSETTINGDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *vMSRESTRICTIONSETTINGDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v vMSRESTRICTIONSETTINGDo) Unscoped() *vMSRESTRICTIONSETTINGDo {
	return v.withDO(v.DO.Unscoped())
}

func (v vMSRESTRICTIONSETTINGDo) Create(values ...*model.VMSRESTRICTIONSETTING) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v vMSRESTRICTIONSETTINGDo) CreateInBatches(values []*model.VMSRESTRICTIONSETTING, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v vMSRESTRICTIONSETTINGDo) Save(values ...*model.VMSRESTRICTIONSETTING) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v vMSRESTRICTIONSETTINGDo) First() (*model.VMSRESTRICTIONSETTING, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VMSRESTRICTIONSETTING), nil
	}
}

func (v vMSRESTRICTIONSETTINGDo) Take() (*model.VMSRESTRICTIONSETTING, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VMSRESTRICTIONSETTING), nil
	}
}

func (v vMSRESTRICTIONSETTINGDo) Last() (*model.VMSRESTRICTIONSETTING, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VMSRESTRICTIONSETTING), nil
	}
}

func (v vMSRESTRICTIONSETTINGDo) Find() ([]*model.VMSRESTRICTIONSETTING, error) {
	result, err := v.DO.Find()
	return result.([]*model.VMSRESTRICTIONSETTING), err
}

func (v vMSRESTRICTIONSETTINGDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VMSRESTRICTIONSETTING, err error) {
	buf := make([]*model.VMSRESTRICTIONSETTING, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v vMSRESTRICTIONSETTINGDo) FindInBatches(result *[]*model.VMSRESTRICTIONSETTING, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v vMSRESTRICTIONSETTINGDo) Attrs(attrs ...field.AssignExpr) *vMSRESTRICTIONSETTINGDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v vMSRESTRICTIONSETTINGDo) Assign(attrs ...field.AssignExpr) *vMSRESTRICTIONSETTINGDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v vMSRESTRICTIONSETTINGDo) Joins(fields ...field.RelationField) *vMSRESTRICTIONSETTINGDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v vMSRESTRICTIONSETTINGDo) Preload(fields ...field.RelationField) *vMSRESTRICTIONSETTINGDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v vMSRESTRICTIONSETTINGDo) FirstOrInit() (*model.VMSRESTRICTIONSETTING, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VMSRESTRICTIONSETTING), nil
	}
}

func (v vMSRESTRICTIONSETTINGDo) FirstOrCreate() (*model.VMSRESTRICTIONSETTING, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VMSRESTRICTIONSETTING), nil
	}
}

func (v vMSRESTRICTIONSETTINGDo) FindByPage(offset int, limit int) (result []*model.VMSRESTRICTIONSETTING, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v vMSRESTRICTIONSETTINGDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v vMSRESTRICTIONSETTINGDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v vMSRESTRICTIONSETTINGDo) Delete(models ...*model.VMSRESTRICTIONSETTING) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *vMSRESTRICTIONSETTINGDo) withDO(do gen.Dao) *vMSRESTRICTIONSETTINGDo {
	v.DO = *do.(*gen.DO)
	return v
}
