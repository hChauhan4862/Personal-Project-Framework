// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"SMART_OFFICE_APP/pkg/db/model"
)

func newVMSBOOKINGSMEMBER(db *gorm.DB, opts ...gen.DOOption) vMSBOOKINGSMEMBER {
	_vMSBOOKINGSMEMBER := vMSBOOKINGSMEMBER{}

	_vMSBOOKINGSMEMBER.vMSBOOKINGSMEMBERDo.UseDB(db, opts...)
	_vMSBOOKINGSMEMBER.vMSBOOKINGSMEMBERDo.UseModel(&model.VMSBOOKINGSMEMBER{})

	tableName := _vMSBOOKINGSMEMBER.vMSBOOKINGSMEMBERDo.TableName()
	_vMSBOOKINGSMEMBER.ALL = field.NewAsterisk(tableName)
	_vMSBOOKINGSMEMBER.BOOKINGID = field.NewString(tableName, "BOOKING_ID")
	_vMSBOOKINGSMEMBER.USERID = field.NewString(tableName, "USER_ID")
	_vMSBOOKINGSMEMBER.USERNAME = field.NewString(tableName, "USER_NAME")
	_vMSBOOKINGSMEMBER.USERIDENTITYCODE = field.NewString(tableName, "USER_IDENTITY_CODE")
	_vMSBOOKINGSMEMBER.USERDEPARTMENTCODE = field.NewString(tableName, "USER_DEPARTMENT_CODE")
	_vMSBOOKINGSMEMBER.USERTYPE = field.NewString(tableName, "USER_TYPE")
	_vMSBOOKINGSMEMBER.ISHOST = field.NewBool(tableName, "IS_HOST")

	_vMSBOOKINGSMEMBER.fillFieldMap()

	return _vMSBOOKINGSMEMBER
}

type vMSBOOKINGSMEMBER struct {
	vMSBOOKINGSMEMBERDo

	ALL                field.Asterisk
	BOOKINGID          field.String
	USERID             field.String
	USERNAME           field.String
	USERIDENTITYCODE   field.String
	USERDEPARTMENTCODE field.String
	USERTYPE           field.String
	ISHOST             field.Bool

	fieldMap map[string]field.Expr
}

func (v vMSBOOKINGSMEMBER) Table(newTableName string) *vMSBOOKINGSMEMBER {
	v.vMSBOOKINGSMEMBERDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v vMSBOOKINGSMEMBER) As(alias string) *vMSBOOKINGSMEMBER {
	v.vMSBOOKINGSMEMBERDo.DO = *(v.vMSBOOKINGSMEMBERDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *vMSBOOKINGSMEMBER) updateTableName(table string) *vMSBOOKINGSMEMBER {
	v.ALL = field.NewAsterisk(table)
	v.BOOKINGID = field.NewString(table, "BOOKING_ID")
	v.USERID = field.NewString(table, "USER_ID")
	v.USERNAME = field.NewString(table, "USER_NAME")
	v.USERIDENTITYCODE = field.NewString(table, "USER_IDENTITY_CODE")
	v.USERDEPARTMENTCODE = field.NewString(table, "USER_DEPARTMENT_CODE")
	v.USERTYPE = field.NewString(table, "USER_TYPE")
	v.ISHOST = field.NewBool(table, "IS_HOST")

	v.fillFieldMap()

	return v
}

func (v *vMSBOOKINGSMEMBER) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *vMSBOOKINGSMEMBER) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 7)
	v.fieldMap["BOOKING_ID"] = v.BOOKINGID
	v.fieldMap["USER_ID"] = v.USERID
	v.fieldMap["USER_NAME"] = v.USERNAME
	v.fieldMap["USER_IDENTITY_CODE"] = v.USERIDENTITYCODE
	v.fieldMap["USER_DEPARTMENT_CODE"] = v.USERDEPARTMENTCODE
	v.fieldMap["USER_TYPE"] = v.USERTYPE
	v.fieldMap["IS_HOST"] = v.ISHOST
}

func (v vMSBOOKINGSMEMBER) clone(db *gorm.DB) vMSBOOKINGSMEMBER {
	v.vMSBOOKINGSMEMBERDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v vMSBOOKINGSMEMBER) replaceDB(db *gorm.DB) vMSBOOKINGSMEMBER {
	v.vMSBOOKINGSMEMBERDo.ReplaceDB(db)
	return v
}

type vMSBOOKINGSMEMBERDo struct{ gen.DO }

func (v vMSBOOKINGSMEMBERDo) Debug() *vMSBOOKINGSMEMBERDo {
	return v.withDO(v.DO.Debug())
}

func (v vMSBOOKINGSMEMBERDo) WithContext(ctx context.Context) *vMSBOOKINGSMEMBERDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v vMSBOOKINGSMEMBERDo) ReadDB() *vMSBOOKINGSMEMBERDo {
	return v.Clauses(dbresolver.Read)
}

func (v vMSBOOKINGSMEMBERDo) WriteDB() *vMSBOOKINGSMEMBERDo {
	return v.Clauses(dbresolver.Write)
}

func (v vMSBOOKINGSMEMBERDo) Session(config *gorm.Session) *vMSBOOKINGSMEMBERDo {
	return v.withDO(v.DO.Session(config))
}

func (v vMSBOOKINGSMEMBERDo) Clauses(conds ...clause.Expression) *vMSBOOKINGSMEMBERDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v vMSBOOKINGSMEMBERDo) Returning(value interface{}, columns ...string) *vMSBOOKINGSMEMBERDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v vMSBOOKINGSMEMBERDo) Not(conds ...gen.Condition) *vMSBOOKINGSMEMBERDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v vMSBOOKINGSMEMBERDo) Or(conds ...gen.Condition) *vMSBOOKINGSMEMBERDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v vMSBOOKINGSMEMBERDo) Select(conds ...field.Expr) *vMSBOOKINGSMEMBERDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v vMSBOOKINGSMEMBERDo) Where(conds ...gen.Condition) *vMSBOOKINGSMEMBERDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v vMSBOOKINGSMEMBERDo) Order(conds ...field.Expr) *vMSBOOKINGSMEMBERDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v vMSBOOKINGSMEMBERDo) Distinct(cols ...field.Expr) *vMSBOOKINGSMEMBERDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v vMSBOOKINGSMEMBERDo) Omit(cols ...field.Expr) *vMSBOOKINGSMEMBERDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v vMSBOOKINGSMEMBERDo) Join(table schema.Tabler, on ...field.Expr) *vMSBOOKINGSMEMBERDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v vMSBOOKINGSMEMBERDo) LeftJoin(table schema.Tabler, on ...field.Expr) *vMSBOOKINGSMEMBERDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v vMSBOOKINGSMEMBERDo) RightJoin(table schema.Tabler, on ...field.Expr) *vMSBOOKINGSMEMBERDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v vMSBOOKINGSMEMBERDo) Group(cols ...field.Expr) *vMSBOOKINGSMEMBERDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v vMSBOOKINGSMEMBERDo) Having(conds ...gen.Condition) *vMSBOOKINGSMEMBERDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v vMSBOOKINGSMEMBERDo) Limit(limit int) *vMSBOOKINGSMEMBERDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v vMSBOOKINGSMEMBERDo) Offset(offset int) *vMSBOOKINGSMEMBERDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v vMSBOOKINGSMEMBERDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *vMSBOOKINGSMEMBERDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v vMSBOOKINGSMEMBERDo) Unscoped() *vMSBOOKINGSMEMBERDo {
	return v.withDO(v.DO.Unscoped())
}

func (v vMSBOOKINGSMEMBERDo) Create(values ...*model.VMSBOOKINGSMEMBER) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v vMSBOOKINGSMEMBERDo) CreateInBatches(values []*model.VMSBOOKINGSMEMBER, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v vMSBOOKINGSMEMBERDo) Save(values ...*model.VMSBOOKINGSMEMBER) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v vMSBOOKINGSMEMBERDo) First() (*model.VMSBOOKINGSMEMBER, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VMSBOOKINGSMEMBER), nil
	}
}

func (v vMSBOOKINGSMEMBERDo) Take() (*model.VMSBOOKINGSMEMBER, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VMSBOOKINGSMEMBER), nil
	}
}

func (v vMSBOOKINGSMEMBERDo) Last() (*model.VMSBOOKINGSMEMBER, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VMSBOOKINGSMEMBER), nil
	}
}

func (v vMSBOOKINGSMEMBERDo) Find() ([]*model.VMSBOOKINGSMEMBER, error) {
	result, err := v.DO.Find()
	return result.([]*model.VMSBOOKINGSMEMBER), err
}

func (v vMSBOOKINGSMEMBERDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VMSBOOKINGSMEMBER, err error) {
	buf := make([]*model.VMSBOOKINGSMEMBER, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v vMSBOOKINGSMEMBERDo) FindInBatches(result *[]*model.VMSBOOKINGSMEMBER, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v vMSBOOKINGSMEMBERDo) Attrs(attrs ...field.AssignExpr) *vMSBOOKINGSMEMBERDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v vMSBOOKINGSMEMBERDo) Assign(attrs ...field.AssignExpr) *vMSBOOKINGSMEMBERDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v vMSBOOKINGSMEMBERDo) Joins(fields ...field.RelationField) *vMSBOOKINGSMEMBERDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v vMSBOOKINGSMEMBERDo) Preload(fields ...field.RelationField) *vMSBOOKINGSMEMBERDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v vMSBOOKINGSMEMBERDo) FirstOrInit() (*model.VMSBOOKINGSMEMBER, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VMSBOOKINGSMEMBER), nil
	}
}

func (v vMSBOOKINGSMEMBERDo) FirstOrCreate() (*model.VMSBOOKINGSMEMBER, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VMSBOOKINGSMEMBER), nil
	}
}

func (v vMSBOOKINGSMEMBERDo) FindByPage(offset int, limit int) (result []*model.VMSBOOKINGSMEMBER, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v vMSBOOKINGSMEMBERDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v vMSBOOKINGSMEMBERDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v vMSBOOKINGSMEMBERDo) Delete(models ...*model.VMSBOOKINGSMEMBER) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *vMSBOOKINGSMEMBERDo) withDO(do gen.Dao) *vMSBOOKINGSMEMBERDo {
	v.DO = *do.(*gen.DO)
	return v
}
