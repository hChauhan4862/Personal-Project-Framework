// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"SMART_OFFICE_APP/pkg/db/model"
)

func newORGOFFICE(db *gorm.DB, opts ...gen.DOOption) oRGOFFICE {
	_oRGOFFICE := oRGOFFICE{}

	_oRGOFFICE.oRGOFFICEDo.UseDB(db, opts...)
	_oRGOFFICE.oRGOFFICEDo.UseModel(&model.ORGOFFICE{})

	tableName := _oRGOFFICE.oRGOFFICEDo.TableName()
	_oRGOFFICE.ALL = field.NewAsterisk(tableName)
	_oRGOFFICE.OFFICEUNQCD = field.NewString(tableName, "OFFICE_UNQCD")
	_oRGOFFICE.OFFICENAME = field.NewString(tableName, "OFFICE_NAME")
	_oRGOFFICE.OFFICEADDRESS = field.NewString(tableName, "OFFICE_ADDRESS")
	_oRGOFFICE.COMPANYCODE = field.NewString(tableName, "COMPANY_CODE")
	_oRGOFFICE.ISACTIVE = field.NewBool(tableName, "IS_ACTIVE")

	_oRGOFFICE.fillFieldMap()

	return _oRGOFFICE
}

type oRGOFFICE struct {
	oRGOFFICEDo

	ALL           field.Asterisk
	OFFICEUNQCD   field.String
	OFFICENAME    field.String
	OFFICEADDRESS field.String
	COMPANYCODE   field.String
	ISACTIVE      field.Bool

	fieldMap map[string]field.Expr
}

func (o oRGOFFICE) Table(newTableName string) *oRGOFFICE {
	o.oRGOFFICEDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o oRGOFFICE) As(alias string) *oRGOFFICE {
	o.oRGOFFICEDo.DO = *(o.oRGOFFICEDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *oRGOFFICE) updateTableName(table string) *oRGOFFICE {
	o.ALL = field.NewAsterisk(table)
	o.OFFICEUNQCD = field.NewString(table, "OFFICE_UNQCD")
	o.OFFICENAME = field.NewString(table, "OFFICE_NAME")
	o.OFFICEADDRESS = field.NewString(table, "OFFICE_ADDRESS")
	o.COMPANYCODE = field.NewString(table, "COMPANY_CODE")
	o.ISACTIVE = field.NewBool(table, "IS_ACTIVE")

	o.fillFieldMap()

	return o
}

func (o *oRGOFFICE) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *oRGOFFICE) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 5)
	o.fieldMap["OFFICE_UNQCD"] = o.OFFICEUNQCD
	o.fieldMap["OFFICE_NAME"] = o.OFFICENAME
	o.fieldMap["OFFICE_ADDRESS"] = o.OFFICEADDRESS
	o.fieldMap["COMPANY_CODE"] = o.COMPANYCODE
	o.fieldMap["IS_ACTIVE"] = o.ISACTIVE
}

func (o oRGOFFICE) clone(db *gorm.DB) oRGOFFICE {
	o.oRGOFFICEDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o oRGOFFICE) replaceDB(db *gorm.DB) oRGOFFICE {
	o.oRGOFFICEDo.ReplaceDB(db)
	return o
}

type oRGOFFICEDo struct{ gen.DO }

func (o oRGOFFICEDo) Debug() *oRGOFFICEDo {
	return o.withDO(o.DO.Debug())
}

func (o oRGOFFICEDo) WithContext(ctx context.Context) *oRGOFFICEDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o oRGOFFICEDo) ReadDB() *oRGOFFICEDo {
	return o.Clauses(dbresolver.Read)
}

func (o oRGOFFICEDo) WriteDB() *oRGOFFICEDo {
	return o.Clauses(dbresolver.Write)
}

func (o oRGOFFICEDo) Session(config *gorm.Session) *oRGOFFICEDo {
	return o.withDO(o.DO.Session(config))
}

func (o oRGOFFICEDo) Clauses(conds ...clause.Expression) *oRGOFFICEDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o oRGOFFICEDo) Returning(value interface{}, columns ...string) *oRGOFFICEDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o oRGOFFICEDo) Not(conds ...gen.Condition) *oRGOFFICEDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o oRGOFFICEDo) Or(conds ...gen.Condition) *oRGOFFICEDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o oRGOFFICEDo) Select(conds ...field.Expr) *oRGOFFICEDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o oRGOFFICEDo) Where(conds ...gen.Condition) *oRGOFFICEDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o oRGOFFICEDo) Order(conds ...field.Expr) *oRGOFFICEDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o oRGOFFICEDo) Distinct(cols ...field.Expr) *oRGOFFICEDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o oRGOFFICEDo) Omit(cols ...field.Expr) *oRGOFFICEDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o oRGOFFICEDo) Join(table schema.Tabler, on ...field.Expr) *oRGOFFICEDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o oRGOFFICEDo) LeftJoin(table schema.Tabler, on ...field.Expr) *oRGOFFICEDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o oRGOFFICEDo) RightJoin(table schema.Tabler, on ...field.Expr) *oRGOFFICEDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o oRGOFFICEDo) Group(cols ...field.Expr) *oRGOFFICEDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o oRGOFFICEDo) Having(conds ...gen.Condition) *oRGOFFICEDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o oRGOFFICEDo) Limit(limit int) *oRGOFFICEDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o oRGOFFICEDo) Offset(offset int) *oRGOFFICEDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o oRGOFFICEDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *oRGOFFICEDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o oRGOFFICEDo) Unscoped() *oRGOFFICEDo {
	return o.withDO(o.DO.Unscoped())
}

func (o oRGOFFICEDo) Create(values ...*model.ORGOFFICE) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o oRGOFFICEDo) CreateInBatches(values []*model.ORGOFFICE, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o oRGOFFICEDo) Save(values ...*model.ORGOFFICE) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o oRGOFFICEDo) First() (*model.ORGOFFICE, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGOFFICE), nil
	}
}

func (o oRGOFFICEDo) Take() (*model.ORGOFFICE, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGOFFICE), nil
	}
}

func (o oRGOFFICEDo) Last() (*model.ORGOFFICE, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGOFFICE), nil
	}
}

func (o oRGOFFICEDo) Find() ([]*model.ORGOFFICE, error) {
	result, err := o.DO.Find()
	return result.([]*model.ORGOFFICE), err
}

func (o oRGOFFICEDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ORGOFFICE, err error) {
	buf := make([]*model.ORGOFFICE, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o oRGOFFICEDo) FindInBatches(result *[]*model.ORGOFFICE, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o oRGOFFICEDo) Attrs(attrs ...field.AssignExpr) *oRGOFFICEDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o oRGOFFICEDo) Assign(attrs ...field.AssignExpr) *oRGOFFICEDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o oRGOFFICEDo) Joins(fields ...field.RelationField) *oRGOFFICEDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o oRGOFFICEDo) Preload(fields ...field.RelationField) *oRGOFFICEDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o oRGOFFICEDo) FirstOrInit() (*model.ORGOFFICE, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGOFFICE), nil
	}
}

func (o oRGOFFICEDo) FirstOrCreate() (*model.ORGOFFICE, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGOFFICE), nil
	}
}

func (o oRGOFFICEDo) FindByPage(offset int, limit int) (result []*model.ORGOFFICE, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o oRGOFFICEDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o oRGOFFICEDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o oRGOFFICEDo) Delete(models ...*model.ORGOFFICE) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *oRGOFFICEDo) withDO(do gen.Dao) *oRGOFFICEDo {
	o.DO = *do.(*gen.DO)
	return o
}
