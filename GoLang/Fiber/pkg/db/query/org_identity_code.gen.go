// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"SMART_OFFICE_APP/pkg/db/model"
)

func newORGIDENTITYCODE(db *gorm.DB, opts ...gen.DOOption) oRGIDENTITYCODE {
	_oRGIDENTITYCODE := oRGIDENTITYCODE{}

	_oRGIDENTITYCODE.oRGIDENTITYCODEDo.UseDB(db, opts...)
	_oRGIDENTITYCODE.oRGIDENTITYCODEDo.UseModel(&model.ORGIDENTITYCODE{})

	tableName := _oRGIDENTITYCODE.oRGIDENTITYCODEDo.TableName()
	_oRGIDENTITYCODE.ALL = field.NewAsterisk(tableName)
	_oRGIDENTITYCODE.IDNTYSEQ = field.NewInt64(tableName, "IDNTY_SEQ")
	_oRGIDENTITYCODE.IDNTCODE = field.NewString(tableName, "IDNT_CODE")
	_oRGIDENTITYCODE.IDNTNAME = field.NewString(tableName, "IDNT_NAME")

	_oRGIDENTITYCODE.fillFieldMap()

	return _oRGIDENTITYCODE
}

type oRGIDENTITYCODE struct {
	oRGIDENTITYCODEDo

	ALL      field.Asterisk
	IDNTYSEQ field.Int64
	IDNTCODE field.String
	IDNTNAME field.String

	fieldMap map[string]field.Expr
}

func (o oRGIDENTITYCODE) Table(newTableName string) *oRGIDENTITYCODE {
	o.oRGIDENTITYCODEDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o oRGIDENTITYCODE) As(alias string) *oRGIDENTITYCODE {
	o.oRGIDENTITYCODEDo.DO = *(o.oRGIDENTITYCODEDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *oRGIDENTITYCODE) updateTableName(table string) *oRGIDENTITYCODE {
	o.ALL = field.NewAsterisk(table)
	o.IDNTYSEQ = field.NewInt64(table, "IDNTY_SEQ")
	o.IDNTCODE = field.NewString(table, "IDNT_CODE")
	o.IDNTNAME = field.NewString(table, "IDNT_NAME")

	o.fillFieldMap()

	return o
}

func (o *oRGIDENTITYCODE) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *oRGIDENTITYCODE) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 3)
	o.fieldMap["IDNTY_SEQ"] = o.IDNTYSEQ
	o.fieldMap["IDNT_CODE"] = o.IDNTCODE
	o.fieldMap["IDNT_NAME"] = o.IDNTNAME
}

func (o oRGIDENTITYCODE) clone(db *gorm.DB) oRGIDENTITYCODE {
	o.oRGIDENTITYCODEDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o oRGIDENTITYCODE) replaceDB(db *gorm.DB) oRGIDENTITYCODE {
	o.oRGIDENTITYCODEDo.ReplaceDB(db)
	return o
}

type oRGIDENTITYCODEDo struct{ gen.DO }

func (o oRGIDENTITYCODEDo) Debug() *oRGIDENTITYCODEDo {
	return o.withDO(o.DO.Debug())
}

func (o oRGIDENTITYCODEDo) WithContext(ctx context.Context) *oRGIDENTITYCODEDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o oRGIDENTITYCODEDo) ReadDB() *oRGIDENTITYCODEDo {
	return o.Clauses(dbresolver.Read)
}

func (o oRGIDENTITYCODEDo) WriteDB() *oRGIDENTITYCODEDo {
	return o.Clauses(dbresolver.Write)
}

func (o oRGIDENTITYCODEDo) Session(config *gorm.Session) *oRGIDENTITYCODEDo {
	return o.withDO(o.DO.Session(config))
}

func (o oRGIDENTITYCODEDo) Clauses(conds ...clause.Expression) *oRGIDENTITYCODEDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o oRGIDENTITYCODEDo) Returning(value interface{}, columns ...string) *oRGIDENTITYCODEDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o oRGIDENTITYCODEDo) Not(conds ...gen.Condition) *oRGIDENTITYCODEDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o oRGIDENTITYCODEDo) Or(conds ...gen.Condition) *oRGIDENTITYCODEDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o oRGIDENTITYCODEDo) Select(conds ...field.Expr) *oRGIDENTITYCODEDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o oRGIDENTITYCODEDo) Where(conds ...gen.Condition) *oRGIDENTITYCODEDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o oRGIDENTITYCODEDo) Order(conds ...field.Expr) *oRGIDENTITYCODEDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o oRGIDENTITYCODEDo) Distinct(cols ...field.Expr) *oRGIDENTITYCODEDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o oRGIDENTITYCODEDo) Omit(cols ...field.Expr) *oRGIDENTITYCODEDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o oRGIDENTITYCODEDo) Join(table schema.Tabler, on ...field.Expr) *oRGIDENTITYCODEDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o oRGIDENTITYCODEDo) LeftJoin(table schema.Tabler, on ...field.Expr) *oRGIDENTITYCODEDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o oRGIDENTITYCODEDo) RightJoin(table schema.Tabler, on ...field.Expr) *oRGIDENTITYCODEDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o oRGIDENTITYCODEDo) Group(cols ...field.Expr) *oRGIDENTITYCODEDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o oRGIDENTITYCODEDo) Having(conds ...gen.Condition) *oRGIDENTITYCODEDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o oRGIDENTITYCODEDo) Limit(limit int) *oRGIDENTITYCODEDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o oRGIDENTITYCODEDo) Offset(offset int) *oRGIDENTITYCODEDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o oRGIDENTITYCODEDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *oRGIDENTITYCODEDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o oRGIDENTITYCODEDo) Unscoped() *oRGIDENTITYCODEDo {
	return o.withDO(o.DO.Unscoped())
}

func (o oRGIDENTITYCODEDo) Create(values ...*model.ORGIDENTITYCODE) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o oRGIDENTITYCODEDo) CreateInBatches(values []*model.ORGIDENTITYCODE, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o oRGIDENTITYCODEDo) Save(values ...*model.ORGIDENTITYCODE) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o oRGIDENTITYCODEDo) First() (*model.ORGIDENTITYCODE, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGIDENTITYCODE), nil
	}
}

func (o oRGIDENTITYCODEDo) Take() (*model.ORGIDENTITYCODE, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGIDENTITYCODE), nil
	}
}

func (o oRGIDENTITYCODEDo) Last() (*model.ORGIDENTITYCODE, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGIDENTITYCODE), nil
	}
}

func (o oRGIDENTITYCODEDo) Find() ([]*model.ORGIDENTITYCODE, error) {
	result, err := o.DO.Find()
	return result.([]*model.ORGIDENTITYCODE), err
}

func (o oRGIDENTITYCODEDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ORGIDENTITYCODE, err error) {
	buf := make([]*model.ORGIDENTITYCODE, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o oRGIDENTITYCODEDo) FindInBatches(result *[]*model.ORGIDENTITYCODE, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o oRGIDENTITYCODEDo) Attrs(attrs ...field.AssignExpr) *oRGIDENTITYCODEDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o oRGIDENTITYCODEDo) Assign(attrs ...field.AssignExpr) *oRGIDENTITYCODEDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o oRGIDENTITYCODEDo) Joins(fields ...field.RelationField) *oRGIDENTITYCODEDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o oRGIDENTITYCODEDo) Preload(fields ...field.RelationField) *oRGIDENTITYCODEDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o oRGIDENTITYCODEDo) FirstOrInit() (*model.ORGIDENTITYCODE, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGIDENTITYCODE), nil
	}
}

func (o oRGIDENTITYCODEDo) FirstOrCreate() (*model.ORGIDENTITYCODE, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGIDENTITYCODE), nil
	}
}

func (o oRGIDENTITYCODEDo) FindByPage(offset int, limit int) (result []*model.ORGIDENTITYCODE, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o oRGIDENTITYCODEDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o oRGIDENTITYCODEDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o oRGIDENTITYCODEDo) Delete(models ...*model.ORGIDENTITYCODE) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *oRGIDENTITYCODEDo) withDO(do gen.Dao) *oRGIDENTITYCODEDo {
	o.DO = *do.(*gen.DO)
	return o
}
