// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"SMART_OFFICE_APP/pkg/db/model"
)

func newORGNOTICE(db *gorm.DB, opts ...gen.DOOption) oRGNOTICE {
	_oRGNOTICE := oRGNOTICE{}

	_oRGNOTICE.oRGNOTICEDo.UseDB(db, opts...)
	_oRGNOTICE.oRGNOTICEDo.UseModel(&model.ORGNOTICE{})

	tableName := _oRGNOTICE.oRGNOTICEDo.TableName()
	_oRGNOTICE.ALL = field.NewAsterisk(tableName)
	_oRGNOTICE.NOTICEID = field.NewInt64(tableName, "NOTICE_ID")
	_oRGNOTICE.NOTICEDATE = field.NewString(tableName, "NOTICE_DATE")
	_oRGNOTICE.NOTICETITLE = field.NewString(tableName, "NOTICE_TITLE")
	_oRGNOTICE.NOTICEBODY = field.NewString(tableName, "NOTICE_BODY")
	_oRGNOTICE.NOTICETYPE = field.NewString(tableName, "NOTICE_TYPE")
	_oRGNOTICE.ISACTIVE = field.NewBool(tableName, "IS_ACTIVE")
	_oRGNOTICE.CREATEDAT = field.NewString(tableName, "CREATED_AT")
	_oRGNOTICE.UPDATEDAT = field.NewString(tableName, "UPDATED_AT")

	_oRGNOTICE.fillFieldMap()

	return _oRGNOTICE
}

type oRGNOTICE struct {
	oRGNOTICEDo

	ALL         field.Asterisk
	NOTICEID    field.Int64
	NOTICEDATE  field.String
	NOTICETITLE field.String
	NOTICEBODY  field.String
	NOTICETYPE  field.String
	ISACTIVE    field.Bool
	CREATEDAT   field.String
	UPDATEDAT   field.String

	fieldMap map[string]field.Expr
}

func (o oRGNOTICE) Table(newTableName string) *oRGNOTICE {
	o.oRGNOTICEDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o oRGNOTICE) As(alias string) *oRGNOTICE {
	o.oRGNOTICEDo.DO = *(o.oRGNOTICEDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *oRGNOTICE) updateTableName(table string) *oRGNOTICE {
	o.ALL = field.NewAsterisk(table)
	o.NOTICEID = field.NewInt64(table, "NOTICE_ID")
	o.NOTICEDATE = field.NewString(table, "NOTICE_DATE")
	o.NOTICETITLE = field.NewString(table, "NOTICE_TITLE")
	o.NOTICEBODY = field.NewString(table, "NOTICE_BODY")
	o.NOTICETYPE = field.NewString(table, "NOTICE_TYPE")
	o.ISACTIVE = field.NewBool(table, "IS_ACTIVE")
	o.CREATEDAT = field.NewString(table, "CREATED_AT")
	o.UPDATEDAT = field.NewString(table, "UPDATED_AT")

	o.fillFieldMap()

	return o
}

func (o *oRGNOTICE) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *oRGNOTICE) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 8)
	o.fieldMap["NOTICE_ID"] = o.NOTICEID
	o.fieldMap["NOTICE_DATE"] = o.NOTICEDATE
	o.fieldMap["NOTICE_TITLE"] = o.NOTICETITLE
	o.fieldMap["NOTICE_BODY"] = o.NOTICEBODY
	o.fieldMap["NOTICE_TYPE"] = o.NOTICETYPE
	o.fieldMap["IS_ACTIVE"] = o.ISACTIVE
	o.fieldMap["CREATED_AT"] = o.CREATEDAT
	o.fieldMap["UPDATED_AT"] = o.UPDATEDAT
}

func (o oRGNOTICE) clone(db *gorm.DB) oRGNOTICE {
	o.oRGNOTICEDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o oRGNOTICE) replaceDB(db *gorm.DB) oRGNOTICE {
	o.oRGNOTICEDo.ReplaceDB(db)
	return o
}

type oRGNOTICEDo struct{ gen.DO }

func (o oRGNOTICEDo) Debug() *oRGNOTICEDo {
	return o.withDO(o.DO.Debug())
}

func (o oRGNOTICEDo) WithContext(ctx context.Context) *oRGNOTICEDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o oRGNOTICEDo) ReadDB() *oRGNOTICEDo {
	return o.Clauses(dbresolver.Read)
}

func (o oRGNOTICEDo) WriteDB() *oRGNOTICEDo {
	return o.Clauses(dbresolver.Write)
}

func (o oRGNOTICEDo) Session(config *gorm.Session) *oRGNOTICEDo {
	return o.withDO(o.DO.Session(config))
}

func (o oRGNOTICEDo) Clauses(conds ...clause.Expression) *oRGNOTICEDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o oRGNOTICEDo) Returning(value interface{}, columns ...string) *oRGNOTICEDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o oRGNOTICEDo) Not(conds ...gen.Condition) *oRGNOTICEDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o oRGNOTICEDo) Or(conds ...gen.Condition) *oRGNOTICEDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o oRGNOTICEDo) Select(conds ...field.Expr) *oRGNOTICEDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o oRGNOTICEDo) Where(conds ...gen.Condition) *oRGNOTICEDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o oRGNOTICEDo) Order(conds ...field.Expr) *oRGNOTICEDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o oRGNOTICEDo) Distinct(cols ...field.Expr) *oRGNOTICEDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o oRGNOTICEDo) Omit(cols ...field.Expr) *oRGNOTICEDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o oRGNOTICEDo) Join(table schema.Tabler, on ...field.Expr) *oRGNOTICEDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o oRGNOTICEDo) LeftJoin(table schema.Tabler, on ...field.Expr) *oRGNOTICEDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o oRGNOTICEDo) RightJoin(table schema.Tabler, on ...field.Expr) *oRGNOTICEDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o oRGNOTICEDo) Group(cols ...field.Expr) *oRGNOTICEDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o oRGNOTICEDo) Having(conds ...gen.Condition) *oRGNOTICEDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o oRGNOTICEDo) Limit(limit int) *oRGNOTICEDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o oRGNOTICEDo) Offset(offset int) *oRGNOTICEDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o oRGNOTICEDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *oRGNOTICEDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o oRGNOTICEDo) Unscoped() *oRGNOTICEDo {
	return o.withDO(o.DO.Unscoped())
}

func (o oRGNOTICEDo) Create(values ...*model.ORGNOTICE) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o oRGNOTICEDo) CreateInBatches(values []*model.ORGNOTICE, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o oRGNOTICEDo) Save(values ...*model.ORGNOTICE) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o oRGNOTICEDo) First() (*model.ORGNOTICE, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGNOTICE), nil
	}
}

func (o oRGNOTICEDo) Take() (*model.ORGNOTICE, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGNOTICE), nil
	}
}

func (o oRGNOTICEDo) Last() (*model.ORGNOTICE, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGNOTICE), nil
	}
}

func (o oRGNOTICEDo) Find() ([]*model.ORGNOTICE, error) {
	result, err := o.DO.Find()
	return result.([]*model.ORGNOTICE), err
}

func (o oRGNOTICEDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ORGNOTICE, err error) {
	buf := make([]*model.ORGNOTICE, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o oRGNOTICEDo) FindInBatches(result *[]*model.ORGNOTICE, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o oRGNOTICEDo) Attrs(attrs ...field.AssignExpr) *oRGNOTICEDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o oRGNOTICEDo) Assign(attrs ...field.AssignExpr) *oRGNOTICEDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o oRGNOTICEDo) Joins(fields ...field.RelationField) *oRGNOTICEDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o oRGNOTICEDo) Preload(fields ...field.RelationField) *oRGNOTICEDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o oRGNOTICEDo) FirstOrInit() (*model.ORGNOTICE, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGNOTICE), nil
	}
}

func (o oRGNOTICEDo) FirstOrCreate() (*model.ORGNOTICE, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ORGNOTICE), nil
	}
}

func (o oRGNOTICEDo) FindByPage(offset int, limit int) (result []*model.ORGNOTICE, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o oRGNOTICEDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o oRGNOTICEDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o oRGNOTICEDo) Delete(models ...*model.ORGNOTICE) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *oRGNOTICEDo) withDO(do gen.Dao) *oRGNOTICEDo {
	o.DO = *do.(*gen.DO)
	return o
}
